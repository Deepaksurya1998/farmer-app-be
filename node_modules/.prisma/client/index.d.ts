
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Group
 * 
 */
export type Group = {
  id: number
  groupName: string
  description: string | null
}

/**
 * Model GroupUser
 * 
 */
export type GroupUser = {
  id: number
  userid: string[]
  createdBy: string
  groupid: string
}

/**
 * Model UserActivityLogger
 * 
 */
export type UserActivityLogger = {
  id: number
  userid: string
  event: string
  usertaskid: string
  location: string
}

/**
 * Model TaskTemplate
 * 
 */
export type TaskTemplate = {
  id: number
  title: string
  description: string
  category: string
  groupId: string[]
  startsAt: string
  endsAt: string
  repeatDialy: boolean
  functionalGroup: string
}

/**
 * Model FunctionalGroup
 * 
 */
export type FunctionalGroup = {
  id: number
  title: string
}

/**
 * Model UserTask
 * 
 */
export type UserTask = {
  id: number
  userid: string
  tasktTemplateId: string
  completedAt: string
  comment: string
  location: string
  status: string
  taskType: string
}

/**
 * Model Links
 * 
 */
export type Links = {
  id: number
  title: string
  href: string | null
}

/**
 * Model User
 * 
 */
export type User = {
  id: number
  first_name: string
  last_name: string | null
  email: string | null
  phone_number: string | null
  country_code: string | null
  status: string | null
  is_archived: boolean
  last_active_at: string | null
  role: string
  password: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Groups
 * const groups = await prisma.group.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Groups
   * const groups = await prisma.group.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.group`: Exposes CRUD operations for the **Group** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.group.findMany()
    * ```
    */
  get group(): Prisma.GroupDelegate<GlobalReject>;

  /**
   * `prisma.groupUser`: Exposes CRUD operations for the **GroupUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupUsers
    * const groupUsers = await prisma.groupUser.findMany()
    * ```
    */
  get groupUser(): Prisma.GroupUserDelegate<GlobalReject>;

  /**
   * `prisma.userActivityLogger`: Exposes CRUD operations for the **UserActivityLogger** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserActivityLoggers
    * const userActivityLoggers = await prisma.userActivityLogger.findMany()
    * ```
    */
  get userActivityLogger(): Prisma.UserActivityLoggerDelegate<GlobalReject>;

  /**
   * `prisma.taskTemplate`: Exposes CRUD operations for the **TaskTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TaskTemplates
    * const taskTemplates = await prisma.taskTemplate.findMany()
    * ```
    */
  get taskTemplate(): Prisma.TaskTemplateDelegate<GlobalReject>;

  /**
   * `prisma.functionalGroup`: Exposes CRUD operations for the **FunctionalGroup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FunctionalGroups
    * const functionalGroups = await prisma.functionalGroup.findMany()
    * ```
    */
  get functionalGroup(): Prisma.FunctionalGroupDelegate<GlobalReject>;

  /**
   * `prisma.userTask`: Exposes CRUD operations for the **UserTask** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserTasks
    * const userTasks = await prisma.userTask.findMany()
    * ```
    */
  get userTask(): Prisma.UserTaskDelegate<GlobalReject>;

  /**
   * `prisma.links`: Exposes CRUD operations for the **Links** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Links
    * const links = await prisma.links.findMany()
    * ```
    */
  get links(): Prisma.LinksDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.6.1
   * Query Engine version: 694eea289a8462c80264df36757e4fdc129b1b32
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Group: 'Group',
    GroupUser: 'GroupUser',
    UserActivityLogger: 'UserActivityLogger',
    TaskTemplate: 'TaskTemplate',
    FunctionalGroup: 'FunctionalGroup',
    UserTask: 'UserTask',
    Links: 'Links',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Group
   */


  export type AggregateGroup = {
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  export type GroupAvgAggregateOutputType = {
    id: number | null
  }

  export type GroupSumAggregateOutputType = {
    id: number | null
  }

  export type GroupMinAggregateOutputType = {
    id: number | null
    groupName: string | null
    description: string | null
  }

  export type GroupMaxAggregateOutputType = {
    id: number | null
    groupName: string | null
    description: string | null
  }

  export type GroupCountAggregateOutputType = {
    id: number
    groupName: number
    description: number
    _all: number
  }


  export type GroupAvgAggregateInputType = {
    id?: true
  }

  export type GroupSumAggregateInputType = {
    id?: true
  }

  export type GroupMinAggregateInputType = {
    id?: true
    groupName?: true
    description?: true
  }

  export type GroupMaxAggregateInputType = {
    id?: true
    groupName?: true
    description?: true
  }

  export type GroupCountAggregateInputType = {
    id?: true
    groupName?: true
    description?: true
    _all?: true
  }

  export type GroupAggregateArgs = {
    /**
     * Filter which Group to aggregate.
     * 
    **/
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMaxAggregateInputType
  }

  export type GetGroupAggregateType<T extends GroupAggregateArgs> = {
        [P in keyof T & keyof AggregateGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroup[P]>
      : GetScalarType<T[P], AggregateGroup[P]>
  }




  export type GroupGroupByArgs = {
    where?: GroupWhereInput
    orderBy?: Enumerable<GroupOrderByWithAggregationInput>
    by: Array<GroupScalarFieldEnum>
    having?: GroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupCountAggregateInputType | true
    _avg?: GroupAvgAggregateInputType
    _sum?: GroupSumAggregateInputType
    _min?: GroupMinAggregateInputType
    _max?: GroupMaxAggregateInputType
  }


  export type GroupGroupByOutputType = {
    id: number
    groupName: string
    description: string | null
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  type GetGroupGroupByPayload<T extends GroupGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupGroupByOutputType[P]>
            : GetScalarType<T[P], GroupGroupByOutputType[P]>
        }
      >
    >


  export type GroupSelect = {
    id?: boolean
    groupName?: boolean
    description?: boolean
  }


  export type GroupGetPayload<S extends boolean | null | undefined | GroupArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Group :
    S extends undefined ? never :
    S extends { include: any } & (GroupArgs | GroupFindManyArgs)
    ? Group 
    : S extends { select: any } & (GroupArgs | GroupFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Group ? Group[P] : never
  } 
      : Group


  type GroupCountArgs = Merge<
    Omit<GroupFindManyArgs, 'select' | 'include'> & {
      select?: GroupCountAggregateInputType | true
    }
  >

  export interface GroupDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Group that matches the filter.
     * @param {GroupFindUniqueArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Group'> extends True ? Prisma__GroupClient<GroupGetPayload<T>> : Prisma__GroupClient<GroupGetPayload<T> | null, null>

    /**
     * Find the first Group that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Group'> extends True ? Prisma__GroupClient<GroupGetPayload<T>> : Prisma__GroupClient<GroupGetPayload<T> | null, null>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.group.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.group.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupWithIdOnly = await prisma.group.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GroupFindManyArgs>(
      args?: SelectSubset<T, GroupFindManyArgs>
    ): PrismaPromise<Array<GroupGetPayload<T>>>

    /**
     * Create a Group.
     * @param {GroupCreateArgs} args - Arguments to create a Group.
     * @example
     * // Create one Group
     * const Group = await prisma.group.create({
     *   data: {
     *     // ... data to create a Group
     *   }
     * })
     * 
    **/
    create<T extends GroupCreateArgs>(
      args: SelectSubset<T, GroupCreateArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Create many Groups.
     *     @param {GroupCreateManyArgs} args - Arguments to create many Groups.
     *     @example
     *     // Create many Groups
     *     const group = await prisma.group.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupCreateManyArgs>(
      args?: SelectSubset<T, GroupCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Group.
     * @param {GroupDeleteArgs} args - Arguments to delete one Group.
     * @example
     * // Delete one Group
     * const Group = await prisma.group.delete({
     *   where: {
     *     // ... filter to delete one Group
     *   }
     * })
     * 
    **/
    delete<T extends GroupDeleteArgs>(
      args: SelectSubset<T, GroupDeleteArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Update one Group.
     * @param {GroupUpdateArgs} args - Arguments to update one Group.
     * @example
     * // Update one Group
     * const group = await prisma.group.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupUpdateArgs>(
      args: SelectSubset<T, GroupUpdateArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Delete zero or more Groups.
     * @param {GroupDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.group.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupDeleteManyArgs>(
      args?: SelectSubset<T, GroupDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const group = await prisma.group.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupUpdateManyArgs>(
      args: SelectSubset<T, GroupUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Group.
     * @param {GroupUpsertArgs} args - Arguments to update or create a Group.
     * @example
     * // Update or create a Group
     * const group = await prisma.group.upsert({
     *   create: {
     *     // ... data to create a Group
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Group we want to update
     *   }
     * })
    **/
    upsert<T extends GroupUpsertArgs>(
      args: SelectSubset<T, GroupUpsertArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Find one Group that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {GroupFindUniqueOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GroupFindUniqueOrThrowArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Find the first Group that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GroupFindFirstOrThrowArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.group.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupCountArgs>(
      args?: Subset<T, GroupCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupAggregateArgs>(args: Subset<T, GroupAggregateArgs>): PrismaPromise<GetGroupAggregateType<T>>

    /**
     * Group by Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupGroupByArgs['orderBy'] }
        : { orderBy?: GroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Group.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Group base type for findUnique actions
   */
  export type GroupFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Group
     * 
    **/
    select?: GroupSelect | null
    /**
     * Filter, which Group to fetch.
     * 
    **/
    where: GroupWhereUniqueInput
  }

  /**
   * Group: findUnique
   */
  export interface GroupFindUniqueArgs extends GroupFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Group base type for findFirst actions
   */
  export type GroupFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Group
     * 
    **/
    select?: GroupSelect | null
    /**
     * Filter, which Group to fetch.
     * 
    **/
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     * 
    **/
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     * 
    **/
    distinct?: Enumerable<GroupScalarFieldEnum>
  }

  /**
   * Group: findFirst
   */
  export interface GroupFindFirstArgs extends GroupFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Group findMany
   */
  export type GroupFindManyArgs = {
    /**
     * Select specific fields to fetch from the Group
     * 
    **/
    select?: GroupSelect | null
    /**
     * Filter, which Groups to fetch.
     * 
    **/
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     * 
    **/
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GroupScalarFieldEnum>
  }


  /**
   * Group create
   */
  export type GroupCreateArgs = {
    /**
     * Select specific fields to fetch from the Group
     * 
    **/
    select?: GroupSelect | null
    /**
     * The data needed to create a Group.
     * 
    **/
    data: XOR<GroupCreateInput, GroupUncheckedCreateInput>
  }


  /**
   * Group createMany
   */
  export type GroupCreateManyArgs = {
    /**
     * The data used to create many Groups.
     * 
    **/
    data: Enumerable<GroupCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Group update
   */
  export type GroupUpdateArgs = {
    /**
     * Select specific fields to fetch from the Group
     * 
    **/
    select?: GroupSelect | null
    /**
     * The data needed to update a Group.
     * 
    **/
    data: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
    /**
     * Choose, which Group to update.
     * 
    **/
    where: GroupWhereUniqueInput
  }


  /**
   * Group updateMany
   */
  export type GroupUpdateManyArgs = {
    /**
     * The data used to update Groups.
     * 
    **/
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     * 
    **/
    where?: GroupWhereInput
  }


  /**
   * Group upsert
   */
  export type GroupUpsertArgs = {
    /**
     * Select specific fields to fetch from the Group
     * 
    **/
    select?: GroupSelect | null
    /**
     * The filter to search for the Group to update in case it exists.
     * 
    **/
    where: GroupWhereUniqueInput
    /**
     * In case the Group found by the `where` argument doesn't exist, create a new Group with this data.
     * 
    **/
    create: XOR<GroupCreateInput, GroupUncheckedCreateInput>
    /**
     * In case the Group was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
  }


  /**
   * Group delete
   */
  export type GroupDeleteArgs = {
    /**
     * Select specific fields to fetch from the Group
     * 
    **/
    select?: GroupSelect | null
    /**
     * Filter which Group to delete.
     * 
    **/
    where: GroupWhereUniqueInput
  }


  /**
   * Group deleteMany
   */
  export type GroupDeleteManyArgs = {
    /**
     * Filter which Groups to delete
     * 
    **/
    where?: GroupWhereInput
  }


  /**
   * Group: findUniqueOrThrow
   */
  export type GroupFindUniqueOrThrowArgs = GroupFindUniqueArgsBase
      

  /**
   * Group: findFirstOrThrow
   */
  export type GroupFindFirstOrThrowArgs = GroupFindFirstArgsBase
      

  /**
   * Group without action
   */
  export type GroupArgs = {
    /**
     * Select specific fields to fetch from the Group
     * 
    **/
    select?: GroupSelect | null
  }



  /**
   * Model GroupUser
   */


  export type AggregateGroupUser = {
    _count: GroupUserCountAggregateOutputType | null
    _avg: GroupUserAvgAggregateOutputType | null
    _sum: GroupUserSumAggregateOutputType | null
    _min: GroupUserMinAggregateOutputType | null
    _max: GroupUserMaxAggregateOutputType | null
  }

  export type GroupUserAvgAggregateOutputType = {
    id: number | null
  }

  export type GroupUserSumAggregateOutputType = {
    id: number | null
  }

  export type GroupUserMinAggregateOutputType = {
    id: number | null
    createdBy: string | null
    groupid: string | null
  }

  export type GroupUserMaxAggregateOutputType = {
    id: number | null
    createdBy: string | null
    groupid: string | null
  }

  export type GroupUserCountAggregateOutputType = {
    id: number
    userid: number
    createdBy: number
    groupid: number
    _all: number
  }


  export type GroupUserAvgAggregateInputType = {
    id?: true
  }

  export type GroupUserSumAggregateInputType = {
    id?: true
  }

  export type GroupUserMinAggregateInputType = {
    id?: true
    createdBy?: true
    groupid?: true
  }

  export type GroupUserMaxAggregateInputType = {
    id?: true
    createdBy?: true
    groupid?: true
  }

  export type GroupUserCountAggregateInputType = {
    id?: true
    userid?: true
    createdBy?: true
    groupid?: true
    _all?: true
  }

  export type GroupUserAggregateArgs = {
    /**
     * Filter which GroupUser to aggregate.
     * 
    **/
    where?: GroupUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupUsers to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GroupUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupUsers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupUsers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupUsers
    **/
    _count?: true | GroupUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupUserMaxAggregateInputType
  }

  export type GetGroupUserAggregateType<T extends GroupUserAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupUser[P]>
      : GetScalarType<T[P], AggregateGroupUser[P]>
  }




  export type GroupUserGroupByArgs = {
    where?: GroupUserWhereInput
    orderBy?: Enumerable<GroupUserOrderByWithAggregationInput>
    by: Array<GroupUserScalarFieldEnum>
    having?: GroupUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupUserCountAggregateInputType | true
    _avg?: GroupUserAvgAggregateInputType
    _sum?: GroupUserSumAggregateInputType
    _min?: GroupUserMinAggregateInputType
    _max?: GroupUserMaxAggregateInputType
  }


  export type GroupUserGroupByOutputType = {
    id: number
    userid: string[]
    createdBy: string
    groupid: string
    _count: GroupUserCountAggregateOutputType | null
    _avg: GroupUserAvgAggregateOutputType | null
    _sum: GroupUserSumAggregateOutputType | null
    _min: GroupUserMinAggregateOutputType | null
    _max: GroupUserMaxAggregateOutputType | null
  }

  type GetGroupUserGroupByPayload<T extends GroupUserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GroupUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupUserGroupByOutputType[P]>
            : GetScalarType<T[P], GroupUserGroupByOutputType[P]>
        }
      >
    >


  export type GroupUserSelect = {
    id?: boolean
    userid?: boolean
    createdBy?: boolean
    groupid?: boolean
  }


  export type GroupUserGetPayload<S extends boolean | null | undefined | GroupUserArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GroupUser :
    S extends undefined ? never :
    S extends { include: any } & (GroupUserArgs | GroupUserFindManyArgs)
    ? GroupUser 
    : S extends { select: any } & (GroupUserArgs | GroupUserFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof GroupUser ? GroupUser[P] : never
  } 
      : GroupUser


  type GroupUserCountArgs = Merge<
    Omit<GroupUserFindManyArgs, 'select' | 'include'> & {
      select?: GroupUserCountAggregateInputType | true
    }
  >

  export interface GroupUserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one GroupUser that matches the filter.
     * @param {GroupUserFindUniqueArgs} args - Arguments to find a GroupUser
     * @example
     * // Get one GroupUser
     * const groupUser = await prisma.groupUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupUserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupUserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GroupUser'> extends True ? Prisma__GroupUserClient<GroupUserGetPayload<T>> : Prisma__GroupUserClient<GroupUserGetPayload<T> | null, null>

    /**
     * Find the first GroupUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUserFindFirstArgs} args - Arguments to find a GroupUser
     * @example
     * // Get one GroupUser
     * const groupUser = await prisma.groupUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupUserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupUserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GroupUser'> extends True ? Prisma__GroupUserClient<GroupUserGetPayload<T>> : Prisma__GroupUserClient<GroupUserGetPayload<T> | null, null>

    /**
     * Find zero or more GroupUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupUsers
     * const groupUsers = await prisma.groupUser.findMany()
     * 
     * // Get first 10 GroupUsers
     * const groupUsers = await prisma.groupUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupUserWithIdOnly = await prisma.groupUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GroupUserFindManyArgs>(
      args?: SelectSubset<T, GroupUserFindManyArgs>
    ): PrismaPromise<Array<GroupUserGetPayload<T>>>

    /**
     * Create a GroupUser.
     * @param {GroupUserCreateArgs} args - Arguments to create a GroupUser.
     * @example
     * // Create one GroupUser
     * const GroupUser = await prisma.groupUser.create({
     *   data: {
     *     // ... data to create a GroupUser
     *   }
     * })
     * 
    **/
    create<T extends GroupUserCreateArgs>(
      args: SelectSubset<T, GroupUserCreateArgs>
    ): Prisma__GroupUserClient<GroupUserGetPayload<T>>

    /**
     * Create many GroupUsers.
     *     @param {GroupUserCreateManyArgs} args - Arguments to create many GroupUsers.
     *     @example
     *     // Create many GroupUsers
     *     const groupUser = await prisma.groupUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupUserCreateManyArgs>(
      args?: SelectSubset<T, GroupUserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a GroupUser.
     * @param {GroupUserDeleteArgs} args - Arguments to delete one GroupUser.
     * @example
     * // Delete one GroupUser
     * const GroupUser = await prisma.groupUser.delete({
     *   where: {
     *     // ... filter to delete one GroupUser
     *   }
     * })
     * 
    **/
    delete<T extends GroupUserDeleteArgs>(
      args: SelectSubset<T, GroupUserDeleteArgs>
    ): Prisma__GroupUserClient<GroupUserGetPayload<T>>

    /**
     * Update one GroupUser.
     * @param {GroupUserUpdateArgs} args - Arguments to update one GroupUser.
     * @example
     * // Update one GroupUser
     * const groupUser = await prisma.groupUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupUserUpdateArgs>(
      args: SelectSubset<T, GroupUserUpdateArgs>
    ): Prisma__GroupUserClient<GroupUserGetPayload<T>>

    /**
     * Delete zero or more GroupUsers.
     * @param {GroupUserDeleteManyArgs} args - Arguments to filter GroupUsers to delete.
     * @example
     * // Delete a few GroupUsers
     * const { count } = await prisma.groupUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupUserDeleteManyArgs>(
      args?: SelectSubset<T, GroupUserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupUsers
     * const groupUser = await prisma.groupUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupUserUpdateManyArgs>(
      args: SelectSubset<T, GroupUserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one GroupUser.
     * @param {GroupUserUpsertArgs} args - Arguments to update or create a GroupUser.
     * @example
     * // Update or create a GroupUser
     * const groupUser = await prisma.groupUser.upsert({
     *   create: {
     *     // ... data to create a GroupUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupUser we want to update
     *   }
     * })
    **/
    upsert<T extends GroupUserUpsertArgs>(
      args: SelectSubset<T, GroupUserUpsertArgs>
    ): Prisma__GroupUserClient<GroupUserGetPayload<T>>

    /**
     * Find one GroupUser that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {GroupUserFindUniqueOrThrowArgs} args - Arguments to find a GroupUser
     * @example
     * // Get one GroupUser
     * const groupUser = await prisma.groupUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupUserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GroupUserFindUniqueOrThrowArgs>
    ): Prisma__GroupUserClient<GroupUserGetPayload<T>>

    /**
     * Find the first GroupUser that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUserFindFirstOrThrowArgs} args - Arguments to find a GroupUser
     * @example
     * // Get one GroupUser
     * const groupUser = await prisma.groupUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupUserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GroupUserFindFirstOrThrowArgs>
    ): Prisma__GroupUserClient<GroupUserGetPayload<T>>

    /**
     * Count the number of GroupUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUserCountArgs} args - Arguments to filter GroupUsers to count.
     * @example
     * // Count the number of GroupUsers
     * const count = await prisma.groupUser.count({
     *   where: {
     *     // ... the filter for the GroupUsers we want to count
     *   }
     * })
    **/
    count<T extends GroupUserCountArgs>(
      args?: Subset<T, GroupUserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupUserAggregateArgs>(args: Subset<T, GroupUserAggregateArgs>): PrismaPromise<GetGroupUserAggregateType<T>>

    /**
     * Group by GroupUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupUserGroupByArgs['orderBy'] }
        : { orderBy?: GroupUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupUserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * GroupUser base type for findUnique actions
   */
  export type GroupUserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the GroupUser
     * 
    **/
    select?: GroupUserSelect | null
    /**
     * Filter, which GroupUser to fetch.
     * 
    **/
    where: GroupUserWhereUniqueInput
  }

  /**
   * GroupUser: findUnique
   */
  export interface GroupUserFindUniqueArgs extends GroupUserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GroupUser base type for findFirst actions
   */
  export type GroupUserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the GroupUser
     * 
    **/
    select?: GroupUserSelect | null
    /**
     * Filter, which GroupUser to fetch.
     * 
    **/
    where?: GroupUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupUsers to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupUsers.
     * 
    **/
    cursor?: GroupUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupUsers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupUsers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupUsers.
     * 
    **/
    distinct?: Enumerable<GroupUserScalarFieldEnum>
  }

  /**
   * GroupUser: findFirst
   */
  export interface GroupUserFindFirstArgs extends GroupUserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GroupUser findMany
   */
  export type GroupUserFindManyArgs = {
    /**
     * Select specific fields to fetch from the GroupUser
     * 
    **/
    select?: GroupUserSelect | null
    /**
     * Filter, which GroupUsers to fetch.
     * 
    **/
    where?: GroupUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupUsers to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupUsers.
     * 
    **/
    cursor?: GroupUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupUsers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupUsers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GroupUserScalarFieldEnum>
  }


  /**
   * GroupUser create
   */
  export type GroupUserCreateArgs = {
    /**
     * Select specific fields to fetch from the GroupUser
     * 
    **/
    select?: GroupUserSelect | null
    /**
     * The data needed to create a GroupUser.
     * 
    **/
    data: XOR<GroupUserCreateInput, GroupUserUncheckedCreateInput>
  }


  /**
   * GroupUser createMany
   */
  export type GroupUserCreateManyArgs = {
    /**
     * The data used to create many GroupUsers.
     * 
    **/
    data: Enumerable<GroupUserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GroupUser update
   */
  export type GroupUserUpdateArgs = {
    /**
     * Select specific fields to fetch from the GroupUser
     * 
    **/
    select?: GroupUserSelect | null
    /**
     * The data needed to update a GroupUser.
     * 
    **/
    data: XOR<GroupUserUpdateInput, GroupUserUncheckedUpdateInput>
    /**
     * Choose, which GroupUser to update.
     * 
    **/
    where: GroupUserWhereUniqueInput
  }


  /**
   * GroupUser updateMany
   */
  export type GroupUserUpdateManyArgs = {
    /**
     * The data used to update GroupUsers.
     * 
    **/
    data: XOR<GroupUserUpdateManyMutationInput, GroupUserUncheckedUpdateManyInput>
    /**
     * Filter which GroupUsers to update
     * 
    **/
    where?: GroupUserWhereInput
  }


  /**
   * GroupUser upsert
   */
  export type GroupUserUpsertArgs = {
    /**
     * Select specific fields to fetch from the GroupUser
     * 
    **/
    select?: GroupUserSelect | null
    /**
     * The filter to search for the GroupUser to update in case it exists.
     * 
    **/
    where: GroupUserWhereUniqueInput
    /**
     * In case the GroupUser found by the `where` argument doesn't exist, create a new GroupUser with this data.
     * 
    **/
    create: XOR<GroupUserCreateInput, GroupUserUncheckedCreateInput>
    /**
     * In case the GroupUser was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GroupUserUpdateInput, GroupUserUncheckedUpdateInput>
  }


  /**
   * GroupUser delete
   */
  export type GroupUserDeleteArgs = {
    /**
     * Select specific fields to fetch from the GroupUser
     * 
    **/
    select?: GroupUserSelect | null
    /**
     * Filter which GroupUser to delete.
     * 
    **/
    where: GroupUserWhereUniqueInput
  }


  /**
   * GroupUser deleteMany
   */
  export type GroupUserDeleteManyArgs = {
    /**
     * Filter which GroupUsers to delete
     * 
    **/
    where?: GroupUserWhereInput
  }


  /**
   * GroupUser: findUniqueOrThrow
   */
  export type GroupUserFindUniqueOrThrowArgs = GroupUserFindUniqueArgsBase
      

  /**
   * GroupUser: findFirstOrThrow
   */
  export type GroupUserFindFirstOrThrowArgs = GroupUserFindFirstArgsBase
      

  /**
   * GroupUser without action
   */
  export type GroupUserArgs = {
    /**
     * Select specific fields to fetch from the GroupUser
     * 
    **/
    select?: GroupUserSelect | null
  }



  /**
   * Model UserActivityLogger
   */


  export type AggregateUserActivityLogger = {
    _count: UserActivityLoggerCountAggregateOutputType | null
    _avg: UserActivityLoggerAvgAggregateOutputType | null
    _sum: UserActivityLoggerSumAggregateOutputType | null
    _min: UserActivityLoggerMinAggregateOutputType | null
    _max: UserActivityLoggerMaxAggregateOutputType | null
  }

  export type UserActivityLoggerAvgAggregateOutputType = {
    id: number | null
  }

  export type UserActivityLoggerSumAggregateOutputType = {
    id: number | null
  }

  export type UserActivityLoggerMinAggregateOutputType = {
    id: number | null
    userid: string | null
    event: string | null
    usertaskid: string | null
    location: string | null
  }

  export type UserActivityLoggerMaxAggregateOutputType = {
    id: number | null
    userid: string | null
    event: string | null
    usertaskid: string | null
    location: string | null
  }

  export type UserActivityLoggerCountAggregateOutputType = {
    id: number
    userid: number
    event: number
    usertaskid: number
    location: number
    _all: number
  }


  export type UserActivityLoggerAvgAggregateInputType = {
    id?: true
  }

  export type UserActivityLoggerSumAggregateInputType = {
    id?: true
  }

  export type UserActivityLoggerMinAggregateInputType = {
    id?: true
    userid?: true
    event?: true
    usertaskid?: true
    location?: true
  }

  export type UserActivityLoggerMaxAggregateInputType = {
    id?: true
    userid?: true
    event?: true
    usertaskid?: true
    location?: true
  }

  export type UserActivityLoggerCountAggregateInputType = {
    id?: true
    userid?: true
    event?: true
    usertaskid?: true
    location?: true
    _all?: true
  }

  export type UserActivityLoggerAggregateArgs = {
    /**
     * Filter which UserActivityLogger to aggregate.
     * 
    **/
    where?: UserActivityLoggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivityLoggers to fetch.
     * 
    **/
    orderBy?: Enumerable<UserActivityLoggerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserActivityLoggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivityLoggers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivityLoggers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserActivityLoggers
    **/
    _count?: true | UserActivityLoggerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserActivityLoggerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserActivityLoggerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserActivityLoggerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserActivityLoggerMaxAggregateInputType
  }

  export type GetUserActivityLoggerAggregateType<T extends UserActivityLoggerAggregateArgs> = {
        [P in keyof T & keyof AggregateUserActivityLogger]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserActivityLogger[P]>
      : GetScalarType<T[P], AggregateUserActivityLogger[P]>
  }




  export type UserActivityLoggerGroupByArgs = {
    where?: UserActivityLoggerWhereInput
    orderBy?: Enumerable<UserActivityLoggerOrderByWithAggregationInput>
    by: Array<UserActivityLoggerScalarFieldEnum>
    having?: UserActivityLoggerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserActivityLoggerCountAggregateInputType | true
    _avg?: UserActivityLoggerAvgAggregateInputType
    _sum?: UserActivityLoggerSumAggregateInputType
    _min?: UserActivityLoggerMinAggregateInputType
    _max?: UserActivityLoggerMaxAggregateInputType
  }


  export type UserActivityLoggerGroupByOutputType = {
    id: number
    userid: string
    event: string
    usertaskid: string
    location: string
    _count: UserActivityLoggerCountAggregateOutputType | null
    _avg: UserActivityLoggerAvgAggregateOutputType | null
    _sum: UserActivityLoggerSumAggregateOutputType | null
    _min: UserActivityLoggerMinAggregateOutputType | null
    _max: UserActivityLoggerMaxAggregateOutputType | null
  }

  type GetUserActivityLoggerGroupByPayload<T extends UserActivityLoggerGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserActivityLoggerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserActivityLoggerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserActivityLoggerGroupByOutputType[P]>
            : GetScalarType<T[P], UserActivityLoggerGroupByOutputType[P]>
        }
      >
    >


  export type UserActivityLoggerSelect = {
    id?: boolean
    userid?: boolean
    event?: boolean
    usertaskid?: boolean
    location?: boolean
  }


  export type UserActivityLoggerGetPayload<S extends boolean | null | undefined | UserActivityLoggerArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserActivityLogger :
    S extends undefined ? never :
    S extends { include: any } & (UserActivityLoggerArgs | UserActivityLoggerFindManyArgs)
    ? UserActivityLogger 
    : S extends { select: any } & (UserActivityLoggerArgs | UserActivityLoggerFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserActivityLogger ? UserActivityLogger[P] : never
  } 
      : UserActivityLogger


  type UserActivityLoggerCountArgs = Merge<
    Omit<UserActivityLoggerFindManyArgs, 'select' | 'include'> & {
      select?: UserActivityLoggerCountAggregateInputType | true
    }
  >

  export interface UserActivityLoggerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one UserActivityLogger that matches the filter.
     * @param {UserActivityLoggerFindUniqueArgs} args - Arguments to find a UserActivityLogger
     * @example
     * // Get one UserActivityLogger
     * const userActivityLogger = await prisma.userActivityLogger.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserActivityLoggerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserActivityLoggerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserActivityLogger'> extends True ? Prisma__UserActivityLoggerClient<UserActivityLoggerGetPayload<T>> : Prisma__UserActivityLoggerClient<UserActivityLoggerGetPayload<T> | null, null>

    /**
     * Find the first UserActivityLogger that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityLoggerFindFirstArgs} args - Arguments to find a UserActivityLogger
     * @example
     * // Get one UserActivityLogger
     * const userActivityLogger = await prisma.userActivityLogger.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserActivityLoggerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserActivityLoggerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserActivityLogger'> extends True ? Prisma__UserActivityLoggerClient<UserActivityLoggerGetPayload<T>> : Prisma__UserActivityLoggerClient<UserActivityLoggerGetPayload<T> | null, null>

    /**
     * Find zero or more UserActivityLoggers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityLoggerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserActivityLoggers
     * const userActivityLoggers = await prisma.userActivityLogger.findMany()
     * 
     * // Get first 10 UserActivityLoggers
     * const userActivityLoggers = await prisma.userActivityLogger.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userActivityLoggerWithIdOnly = await prisma.userActivityLogger.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserActivityLoggerFindManyArgs>(
      args?: SelectSubset<T, UserActivityLoggerFindManyArgs>
    ): PrismaPromise<Array<UserActivityLoggerGetPayload<T>>>

    /**
     * Create a UserActivityLogger.
     * @param {UserActivityLoggerCreateArgs} args - Arguments to create a UserActivityLogger.
     * @example
     * // Create one UserActivityLogger
     * const UserActivityLogger = await prisma.userActivityLogger.create({
     *   data: {
     *     // ... data to create a UserActivityLogger
     *   }
     * })
     * 
    **/
    create<T extends UserActivityLoggerCreateArgs>(
      args: SelectSubset<T, UserActivityLoggerCreateArgs>
    ): Prisma__UserActivityLoggerClient<UserActivityLoggerGetPayload<T>>

    /**
     * Create many UserActivityLoggers.
     *     @param {UserActivityLoggerCreateManyArgs} args - Arguments to create many UserActivityLoggers.
     *     @example
     *     // Create many UserActivityLoggers
     *     const userActivityLogger = await prisma.userActivityLogger.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserActivityLoggerCreateManyArgs>(
      args?: SelectSubset<T, UserActivityLoggerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserActivityLogger.
     * @param {UserActivityLoggerDeleteArgs} args - Arguments to delete one UserActivityLogger.
     * @example
     * // Delete one UserActivityLogger
     * const UserActivityLogger = await prisma.userActivityLogger.delete({
     *   where: {
     *     // ... filter to delete one UserActivityLogger
     *   }
     * })
     * 
    **/
    delete<T extends UserActivityLoggerDeleteArgs>(
      args: SelectSubset<T, UserActivityLoggerDeleteArgs>
    ): Prisma__UserActivityLoggerClient<UserActivityLoggerGetPayload<T>>

    /**
     * Update one UserActivityLogger.
     * @param {UserActivityLoggerUpdateArgs} args - Arguments to update one UserActivityLogger.
     * @example
     * // Update one UserActivityLogger
     * const userActivityLogger = await prisma.userActivityLogger.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserActivityLoggerUpdateArgs>(
      args: SelectSubset<T, UserActivityLoggerUpdateArgs>
    ): Prisma__UserActivityLoggerClient<UserActivityLoggerGetPayload<T>>

    /**
     * Delete zero or more UserActivityLoggers.
     * @param {UserActivityLoggerDeleteManyArgs} args - Arguments to filter UserActivityLoggers to delete.
     * @example
     * // Delete a few UserActivityLoggers
     * const { count } = await prisma.userActivityLogger.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserActivityLoggerDeleteManyArgs>(
      args?: SelectSubset<T, UserActivityLoggerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserActivityLoggers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityLoggerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserActivityLoggers
     * const userActivityLogger = await prisma.userActivityLogger.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserActivityLoggerUpdateManyArgs>(
      args: SelectSubset<T, UserActivityLoggerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserActivityLogger.
     * @param {UserActivityLoggerUpsertArgs} args - Arguments to update or create a UserActivityLogger.
     * @example
     * // Update or create a UserActivityLogger
     * const userActivityLogger = await prisma.userActivityLogger.upsert({
     *   create: {
     *     // ... data to create a UserActivityLogger
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserActivityLogger we want to update
     *   }
     * })
    **/
    upsert<T extends UserActivityLoggerUpsertArgs>(
      args: SelectSubset<T, UserActivityLoggerUpsertArgs>
    ): Prisma__UserActivityLoggerClient<UserActivityLoggerGetPayload<T>>

    /**
     * Find one UserActivityLogger that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserActivityLoggerFindUniqueOrThrowArgs} args - Arguments to find a UserActivityLogger
     * @example
     * // Get one UserActivityLogger
     * const userActivityLogger = await prisma.userActivityLogger.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserActivityLoggerFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserActivityLoggerFindUniqueOrThrowArgs>
    ): Prisma__UserActivityLoggerClient<UserActivityLoggerGetPayload<T>>

    /**
     * Find the first UserActivityLogger that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityLoggerFindFirstOrThrowArgs} args - Arguments to find a UserActivityLogger
     * @example
     * // Get one UserActivityLogger
     * const userActivityLogger = await prisma.userActivityLogger.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserActivityLoggerFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserActivityLoggerFindFirstOrThrowArgs>
    ): Prisma__UserActivityLoggerClient<UserActivityLoggerGetPayload<T>>

    /**
     * Count the number of UserActivityLoggers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityLoggerCountArgs} args - Arguments to filter UserActivityLoggers to count.
     * @example
     * // Count the number of UserActivityLoggers
     * const count = await prisma.userActivityLogger.count({
     *   where: {
     *     // ... the filter for the UserActivityLoggers we want to count
     *   }
     * })
    **/
    count<T extends UserActivityLoggerCountArgs>(
      args?: Subset<T, UserActivityLoggerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserActivityLoggerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserActivityLogger.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityLoggerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserActivityLoggerAggregateArgs>(args: Subset<T, UserActivityLoggerAggregateArgs>): PrismaPromise<GetUserActivityLoggerAggregateType<T>>

    /**
     * Group by UserActivityLogger.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityLoggerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserActivityLoggerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserActivityLoggerGroupByArgs['orderBy'] }
        : { orderBy?: UserActivityLoggerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserActivityLoggerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserActivityLoggerGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserActivityLogger.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserActivityLoggerClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserActivityLogger base type for findUnique actions
   */
  export type UserActivityLoggerFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserActivityLogger
     * 
    **/
    select?: UserActivityLoggerSelect | null
    /**
     * Filter, which UserActivityLogger to fetch.
     * 
    **/
    where: UserActivityLoggerWhereUniqueInput
  }

  /**
   * UserActivityLogger: findUnique
   */
  export interface UserActivityLoggerFindUniqueArgs extends UserActivityLoggerFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserActivityLogger base type for findFirst actions
   */
  export type UserActivityLoggerFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserActivityLogger
     * 
    **/
    select?: UserActivityLoggerSelect | null
    /**
     * Filter, which UserActivityLogger to fetch.
     * 
    **/
    where?: UserActivityLoggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivityLoggers to fetch.
     * 
    **/
    orderBy?: Enumerable<UserActivityLoggerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserActivityLoggers.
     * 
    **/
    cursor?: UserActivityLoggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivityLoggers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivityLoggers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserActivityLoggers.
     * 
    **/
    distinct?: Enumerable<UserActivityLoggerScalarFieldEnum>
  }

  /**
   * UserActivityLogger: findFirst
   */
  export interface UserActivityLoggerFindFirstArgs extends UserActivityLoggerFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserActivityLogger findMany
   */
  export type UserActivityLoggerFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserActivityLogger
     * 
    **/
    select?: UserActivityLoggerSelect | null
    /**
     * Filter, which UserActivityLoggers to fetch.
     * 
    **/
    where?: UserActivityLoggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivityLoggers to fetch.
     * 
    **/
    orderBy?: Enumerable<UserActivityLoggerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserActivityLoggers.
     * 
    **/
    cursor?: UserActivityLoggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivityLoggers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivityLoggers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserActivityLoggerScalarFieldEnum>
  }


  /**
   * UserActivityLogger create
   */
  export type UserActivityLoggerCreateArgs = {
    /**
     * Select specific fields to fetch from the UserActivityLogger
     * 
    **/
    select?: UserActivityLoggerSelect | null
    /**
     * The data needed to create a UserActivityLogger.
     * 
    **/
    data: XOR<UserActivityLoggerCreateInput, UserActivityLoggerUncheckedCreateInput>
  }


  /**
   * UserActivityLogger createMany
   */
  export type UserActivityLoggerCreateManyArgs = {
    /**
     * The data used to create many UserActivityLoggers.
     * 
    **/
    data: Enumerable<UserActivityLoggerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserActivityLogger update
   */
  export type UserActivityLoggerUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserActivityLogger
     * 
    **/
    select?: UserActivityLoggerSelect | null
    /**
     * The data needed to update a UserActivityLogger.
     * 
    **/
    data: XOR<UserActivityLoggerUpdateInput, UserActivityLoggerUncheckedUpdateInput>
    /**
     * Choose, which UserActivityLogger to update.
     * 
    **/
    where: UserActivityLoggerWhereUniqueInput
  }


  /**
   * UserActivityLogger updateMany
   */
  export type UserActivityLoggerUpdateManyArgs = {
    /**
     * The data used to update UserActivityLoggers.
     * 
    **/
    data: XOR<UserActivityLoggerUpdateManyMutationInput, UserActivityLoggerUncheckedUpdateManyInput>
    /**
     * Filter which UserActivityLoggers to update
     * 
    **/
    where?: UserActivityLoggerWhereInput
  }


  /**
   * UserActivityLogger upsert
   */
  export type UserActivityLoggerUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserActivityLogger
     * 
    **/
    select?: UserActivityLoggerSelect | null
    /**
     * The filter to search for the UserActivityLogger to update in case it exists.
     * 
    **/
    where: UserActivityLoggerWhereUniqueInput
    /**
     * In case the UserActivityLogger found by the `where` argument doesn't exist, create a new UserActivityLogger with this data.
     * 
    **/
    create: XOR<UserActivityLoggerCreateInput, UserActivityLoggerUncheckedCreateInput>
    /**
     * In case the UserActivityLogger was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserActivityLoggerUpdateInput, UserActivityLoggerUncheckedUpdateInput>
  }


  /**
   * UserActivityLogger delete
   */
  export type UserActivityLoggerDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserActivityLogger
     * 
    **/
    select?: UserActivityLoggerSelect | null
    /**
     * Filter which UserActivityLogger to delete.
     * 
    **/
    where: UserActivityLoggerWhereUniqueInput
  }


  /**
   * UserActivityLogger deleteMany
   */
  export type UserActivityLoggerDeleteManyArgs = {
    /**
     * Filter which UserActivityLoggers to delete
     * 
    **/
    where?: UserActivityLoggerWhereInput
  }


  /**
   * UserActivityLogger: findUniqueOrThrow
   */
  export type UserActivityLoggerFindUniqueOrThrowArgs = UserActivityLoggerFindUniqueArgsBase
      

  /**
   * UserActivityLogger: findFirstOrThrow
   */
  export type UserActivityLoggerFindFirstOrThrowArgs = UserActivityLoggerFindFirstArgsBase
      

  /**
   * UserActivityLogger without action
   */
  export type UserActivityLoggerArgs = {
    /**
     * Select specific fields to fetch from the UserActivityLogger
     * 
    **/
    select?: UserActivityLoggerSelect | null
  }



  /**
   * Model TaskTemplate
   */


  export type AggregateTaskTemplate = {
    _count: TaskTemplateCountAggregateOutputType | null
    _avg: TaskTemplateAvgAggregateOutputType | null
    _sum: TaskTemplateSumAggregateOutputType | null
    _min: TaskTemplateMinAggregateOutputType | null
    _max: TaskTemplateMaxAggregateOutputType | null
  }

  export type TaskTemplateAvgAggregateOutputType = {
    id: number | null
  }

  export type TaskTemplateSumAggregateOutputType = {
    id: number | null
  }

  export type TaskTemplateMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    category: string | null
    startsAt: string | null
    endsAt: string | null
    repeatDialy: boolean | null
    functionalGroup: string | null
  }

  export type TaskTemplateMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    category: string | null
    startsAt: string | null
    endsAt: string | null
    repeatDialy: boolean | null
    functionalGroup: string | null
  }

  export type TaskTemplateCountAggregateOutputType = {
    id: number
    title: number
    description: number
    category: number
    groupId: number
    startsAt: number
    endsAt: number
    repeatDialy: number
    functionalGroup: number
    _all: number
  }


  export type TaskTemplateAvgAggregateInputType = {
    id?: true
  }

  export type TaskTemplateSumAggregateInputType = {
    id?: true
  }

  export type TaskTemplateMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    startsAt?: true
    endsAt?: true
    repeatDialy?: true
    functionalGroup?: true
  }

  export type TaskTemplateMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    startsAt?: true
    endsAt?: true
    repeatDialy?: true
    functionalGroup?: true
  }

  export type TaskTemplateCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    groupId?: true
    startsAt?: true
    endsAt?: true
    repeatDialy?: true
    functionalGroup?: true
    _all?: true
  }

  export type TaskTemplateAggregateArgs = {
    /**
     * Filter which TaskTemplate to aggregate.
     * 
    **/
    where?: TaskTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskTemplates to fetch.
     * 
    **/
    orderBy?: Enumerable<TaskTemplateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TaskTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskTemplates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskTemplates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TaskTemplates
    **/
    _count?: true | TaskTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskTemplateMaxAggregateInputType
  }

  export type GetTaskTemplateAggregateType<T extends TaskTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateTaskTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaskTemplate[P]>
      : GetScalarType<T[P], AggregateTaskTemplate[P]>
  }




  export type TaskTemplateGroupByArgs = {
    where?: TaskTemplateWhereInput
    orderBy?: Enumerable<TaskTemplateOrderByWithAggregationInput>
    by: Array<TaskTemplateScalarFieldEnum>
    having?: TaskTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskTemplateCountAggregateInputType | true
    _avg?: TaskTemplateAvgAggregateInputType
    _sum?: TaskTemplateSumAggregateInputType
    _min?: TaskTemplateMinAggregateInputType
    _max?: TaskTemplateMaxAggregateInputType
  }


  export type TaskTemplateGroupByOutputType = {
    id: number
    title: string
    description: string
    category: string
    groupId: string[]
    startsAt: string
    endsAt: string
    repeatDialy: boolean
    functionalGroup: string
    _count: TaskTemplateCountAggregateOutputType | null
    _avg: TaskTemplateAvgAggregateOutputType | null
    _sum: TaskTemplateSumAggregateOutputType | null
    _min: TaskTemplateMinAggregateOutputType | null
    _max: TaskTemplateMaxAggregateOutputType | null
  }

  type GetTaskTemplateGroupByPayload<T extends TaskTemplateGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TaskTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], TaskTemplateGroupByOutputType[P]>
        }
      >
    >


  export type TaskTemplateSelect = {
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    groupId?: boolean
    startsAt?: boolean
    endsAt?: boolean
    repeatDialy?: boolean
    functionalGroup?: boolean
  }


  export type TaskTemplateGetPayload<S extends boolean | null | undefined | TaskTemplateArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TaskTemplate :
    S extends undefined ? never :
    S extends { include: any } & (TaskTemplateArgs | TaskTemplateFindManyArgs)
    ? TaskTemplate 
    : S extends { select: any } & (TaskTemplateArgs | TaskTemplateFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TaskTemplate ? TaskTemplate[P] : never
  } 
      : TaskTemplate


  type TaskTemplateCountArgs = Merge<
    Omit<TaskTemplateFindManyArgs, 'select' | 'include'> & {
      select?: TaskTemplateCountAggregateInputType | true
    }
  >

  export interface TaskTemplateDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one TaskTemplate that matches the filter.
     * @param {TaskTemplateFindUniqueArgs} args - Arguments to find a TaskTemplate
     * @example
     * // Get one TaskTemplate
     * const taskTemplate = await prisma.taskTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TaskTemplateFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TaskTemplateFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TaskTemplate'> extends True ? Prisma__TaskTemplateClient<TaskTemplateGetPayload<T>> : Prisma__TaskTemplateClient<TaskTemplateGetPayload<T> | null, null>

    /**
     * Find the first TaskTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskTemplateFindFirstArgs} args - Arguments to find a TaskTemplate
     * @example
     * // Get one TaskTemplate
     * const taskTemplate = await prisma.taskTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TaskTemplateFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TaskTemplateFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TaskTemplate'> extends True ? Prisma__TaskTemplateClient<TaskTemplateGetPayload<T>> : Prisma__TaskTemplateClient<TaskTemplateGetPayload<T> | null, null>

    /**
     * Find zero or more TaskTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskTemplateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TaskTemplates
     * const taskTemplates = await prisma.taskTemplate.findMany()
     * 
     * // Get first 10 TaskTemplates
     * const taskTemplates = await prisma.taskTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskTemplateWithIdOnly = await prisma.taskTemplate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TaskTemplateFindManyArgs>(
      args?: SelectSubset<T, TaskTemplateFindManyArgs>
    ): PrismaPromise<Array<TaskTemplateGetPayload<T>>>

    /**
     * Create a TaskTemplate.
     * @param {TaskTemplateCreateArgs} args - Arguments to create a TaskTemplate.
     * @example
     * // Create one TaskTemplate
     * const TaskTemplate = await prisma.taskTemplate.create({
     *   data: {
     *     // ... data to create a TaskTemplate
     *   }
     * })
     * 
    **/
    create<T extends TaskTemplateCreateArgs>(
      args: SelectSubset<T, TaskTemplateCreateArgs>
    ): Prisma__TaskTemplateClient<TaskTemplateGetPayload<T>>

    /**
     * Create many TaskTemplates.
     *     @param {TaskTemplateCreateManyArgs} args - Arguments to create many TaskTemplates.
     *     @example
     *     // Create many TaskTemplates
     *     const taskTemplate = await prisma.taskTemplate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TaskTemplateCreateManyArgs>(
      args?: SelectSubset<T, TaskTemplateCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TaskTemplate.
     * @param {TaskTemplateDeleteArgs} args - Arguments to delete one TaskTemplate.
     * @example
     * // Delete one TaskTemplate
     * const TaskTemplate = await prisma.taskTemplate.delete({
     *   where: {
     *     // ... filter to delete one TaskTemplate
     *   }
     * })
     * 
    **/
    delete<T extends TaskTemplateDeleteArgs>(
      args: SelectSubset<T, TaskTemplateDeleteArgs>
    ): Prisma__TaskTemplateClient<TaskTemplateGetPayload<T>>

    /**
     * Update one TaskTemplate.
     * @param {TaskTemplateUpdateArgs} args - Arguments to update one TaskTemplate.
     * @example
     * // Update one TaskTemplate
     * const taskTemplate = await prisma.taskTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TaskTemplateUpdateArgs>(
      args: SelectSubset<T, TaskTemplateUpdateArgs>
    ): Prisma__TaskTemplateClient<TaskTemplateGetPayload<T>>

    /**
     * Delete zero or more TaskTemplates.
     * @param {TaskTemplateDeleteManyArgs} args - Arguments to filter TaskTemplates to delete.
     * @example
     * // Delete a few TaskTemplates
     * const { count } = await prisma.taskTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TaskTemplateDeleteManyArgs>(
      args?: SelectSubset<T, TaskTemplateDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TaskTemplates
     * const taskTemplate = await prisma.taskTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TaskTemplateUpdateManyArgs>(
      args: SelectSubset<T, TaskTemplateUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TaskTemplate.
     * @param {TaskTemplateUpsertArgs} args - Arguments to update or create a TaskTemplate.
     * @example
     * // Update or create a TaskTemplate
     * const taskTemplate = await prisma.taskTemplate.upsert({
     *   create: {
     *     // ... data to create a TaskTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TaskTemplate we want to update
     *   }
     * })
    **/
    upsert<T extends TaskTemplateUpsertArgs>(
      args: SelectSubset<T, TaskTemplateUpsertArgs>
    ): Prisma__TaskTemplateClient<TaskTemplateGetPayload<T>>

    /**
     * Find one TaskTemplate that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {TaskTemplateFindUniqueOrThrowArgs} args - Arguments to find a TaskTemplate
     * @example
     * // Get one TaskTemplate
     * const taskTemplate = await prisma.taskTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TaskTemplateFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TaskTemplateFindUniqueOrThrowArgs>
    ): Prisma__TaskTemplateClient<TaskTemplateGetPayload<T>>

    /**
     * Find the first TaskTemplate that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskTemplateFindFirstOrThrowArgs} args - Arguments to find a TaskTemplate
     * @example
     * // Get one TaskTemplate
     * const taskTemplate = await prisma.taskTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TaskTemplateFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TaskTemplateFindFirstOrThrowArgs>
    ): Prisma__TaskTemplateClient<TaskTemplateGetPayload<T>>

    /**
     * Count the number of TaskTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskTemplateCountArgs} args - Arguments to filter TaskTemplates to count.
     * @example
     * // Count the number of TaskTemplates
     * const count = await prisma.taskTemplate.count({
     *   where: {
     *     // ... the filter for the TaskTemplates we want to count
     *   }
     * })
    **/
    count<T extends TaskTemplateCountArgs>(
      args?: Subset<T, TaskTemplateCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TaskTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskTemplateAggregateArgs>(args: Subset<T, TaskTemplateAggregateArgs>): PrismaPromise<GetTaskTemplateAggregateType<T>>

    /**
     * Group by TaskTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskTemplateGroupByArgs['orderBy'] }
        : { orderBy?: TaskTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskTemplateGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TaskTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TaskTemplateClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TaskTemplate base type for findUnique actions
   */
  export type TaskTemplateFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TaskTemplate
     * 
    **/
    select?: TaskTemplateSelect | null
    /**
     * Filter, which TaskTemplate to fetch.
     * 
    **/
    where: TaskTemplateWhereUniqueInput
  }

  /**
   * TaskTemplate: findUnique
   */
  export interface TaskTemplateFindUniqueArgs extends TaskTemplateFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TaskTemplate base type for findFirst actions
   */
  export type TaskTemplateFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TaskTemplate
     * 
    **/
    select?: TaskTemplateSelect | null
    /**
     * Filter, which TaskTemplate to fetch.
     * 
    **/
    where?: TaskTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskTemplates to fetch.
     * 
    **/
    orderBy?: Enumerable<TaskTemplateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskTemplates.
     * 
    **/
    cursor?: TaskTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskTemplates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskTemplates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskTemplates.
     * 
    **/
    distinct?: Enumerable<TaskTemplateScalarFieldEnum>
  }

  /**
   * TaskTemplate: findFirst
   */
  export interface TaskTemplateFindFirstArgs extends TaskTemplateFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TaskTemplate findMany
   */
  export type TaskTemplateFindManyArgs = {
    /**
     * Select specific fields to fetch from the TaskTemplate
     * 
    **/
    select?: TaskTemplateSelect | null
    /**
     * Filter, which TaskTemplates to fetch.
     * 
    **/
    where?: TaskTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskTemplates to fetch.
     * 
    **/
    orderBy?: Enumerable<TaskTemplateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TaskTemplates.
     * 
    **/
    cursor?: TaskTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskTemplates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskTemplates.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TaskTemplateScalarFieldEnum>
  }


  /**
   * TaskTemplate create
   */
  export type TaskTemplateCreateArgs = {
    /**
     * Select specific fields to fetch from the TaskTemplate
     * 
    **/
    select?: TaskTemplateSelect | null
    /**
     * The data needed to create a TaskTemplate.
     * 
    **/
    data: XOR<TaskTemplateCreateInput, TaskTemplateUncheckedCreateInput>
  }


  /**
   * TaskTemplate createMany
   */
  export type TaskTemplateCreateManyArgs = {
    /**
     * The data used to create many TaskTemplates.
     * 
    **/
    data: Enumerable<TaskTemplateCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TaskTemplate update
   */
  export type TaskTemplateUpdateArgs = {
    /**
     * Select specific fields to fetch from the TaskTemplate
     * 
    **/
    select?: TaskTemplateSelect | null
    /**
     * The data needed to update a TaskTemplate.
     * 
    **/
    data: XOR<TaskTemplateUpdateInput, TaskTemplateUncheckedUpdateInput>
    /**
     * Choose, which TaskTemplate to update.
     * 
    **/
    where: TaskTemplateWhereUniqueInput
  }


  /**
   * TaskTemplate updateMany
   */
  export type TaskTemplateUpdateManyArgs = {
    /**
     * The data used to update TaskTemplates.
     * 
    **/
    data: XOR<TaskTemplateUpdateManyMutationInput, TaskTemplateUncheckedUpdateManyInput>
    /**
     * Filter which TaskTemplates to update
     * 
    **/
    where?: TaskTemplateWhereInput
  }


  /**
   * TaskTemplate upsert
   */
  export type TaskTemplateUpsertArgs = {
    /**
     * Select specific fields to fetch from the TaskTemplate
     * 
    **/
    select?: TaskTemplateSelect | null
    /**
     * The filter to search for the TaskTemplate to update in case it exists.
     * 
    **/
    where: TaskTemplateWhereUniqueInput
    /**
     * In case the TaskTemplate found by the `where` argument doesn't exist, create a new TaskTemplate with this data.
     * 
    **/
    create: XOR<TaskTemplateCreateInput, TaskTemplateUncheckedCreateInput>
    /**
     * In case the TaskTemplate was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TaskTemplateUpdateInput, TaskTemplateUncheckedUpdateInput>
  }


  /**
   * TaskTemplate delete
   */
  export type TaskTemplateDeleteArgs = {
    /**
     * Select specific fields to fetch from the TaskTemplate
     * 
    **/
    select?: TaskTemplateSelect | null
    /**
     * Filter which TaskTemplate to delete.
     * 
    **/
    where: TaskTemplateWhereUniqueInput
  }


  /**
   * TaskTemplate deleteMany
   */
  export type TaskTemplateDeleteManyArgs = {
    /**
     * Filter which TaskTemplates to delete
     * 
    **/
    where?: TaskTemplateWhereInput
  }


  /**
   * TaskTemplate: findUniqueOrThrow
   */
  export type TaskTemplateFindUniqueOrThrowArgs = TaskTemplateFindUniqueArgsBase
      

  /**
   * TaskTemplate: findFirstOrThrow
   */
  export type TaskTemplateFindFirstOrThrowArgs = TaskTemplateFindFirstArgsBase
      

  /**
   * TaskTemplate without action
   */
  export type TaskTemplateArgs = {
    /**
     * Select specific fields to fetch from the TaskTemplate
     * 
    **/
    select?: TaskTemplateSelect | null
  }



  /**
   * Model FunctionalGroup
   */


  export type AggregateFunctionalGroup = {
    _count: FunctionalGroupCountAggregateOutputType | null
    _avg: FunctionalGroupAvgAggregateOutputType | null
    _sum: FunctionalGroupSumAggregateOutputType | null
    _min: FunctionalGroupMinAggregateOutputType | null
    _max: FunctionalGroupMaxAggregateOutputType | null
  }

  export type FunctionalGroupAvgAggregateOutputType = {
    id: number | null
  }

  export type FunctionalGroupSumAggregateOutputType = {
    id: number | null
  }

  export type FunctionalGroupMinAggregateOutputType = {
    id: number | null
    title: string | null
  }

  export type FunctionalGroupMaxAggregateOutputType = {
    id: number | null
    title: string | null
  }

  export type FunctionalGroupCountAggregateOutputType = {
    id: number
    title: number
    _all: number
  }


  export type FunctionalGroupAvgAggregateInputType = {
    id?: true
  }

  export type FunctionalGroupSumAggregateInputType = {
    id?: true
  }

  export type FunctionalGroupMinAggregateInputType = {
    id?: true
    title?: true
  }

  export type FunctionalGroupMaxAggregateInputType = {
    id?: true
    title?: true
  }

  export type FunctionalGroupCountAggregateInputType = {
    id?: true
    title?: true
    _all?: true
  }

  export type FunctionalGroupAggregateArgs = {
    /**
     * Filter which FunctionalGroup to aggregate.
     * 
    **/
    where?: FunctionalGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FunctionalGroups to fetch.
     * 
    **/
    orderBy?: Enumerable<FunctionalGroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FunctionalGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FunctionalGroups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FunctionalGroups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FunctionalGroups
    **/
    _count?: true | FunctionalGroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FunctionalGroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FunctionalGroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FunctionalGroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FunctionalGroupMaxAggregateInputType
  }

  export type GetFunctionalGroupAggregateType<T extends FunctionalGroupAggregateArgs> = {
        [P in keyof T & keyof AggregateFunctionalGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFunctionalGroup[P]>
      : GetScalarType<T[P], AggregateFunctionalGroup[P]>
  }




  export type FunctionalGroupGroupByArgs = {
    where?: FunctionalGroupWhereInput
    orderBy?: Enumerable<FunctionalGroupOrderByWithAggregationInput>
    by: Array<FunctionalGroupScalarFieldEnum>
    having?: FunctionalGroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FunctionalGroupCountAggregateInputType | true
    _avg?: FunctionalGroupAvgAggregateInputType
    _sum?: FunctionalGroupSumAggregateInputType
    _min?: FunctionalGroupMinAggregateInputType
    _max?: FunctionalGroupMaxAggregateInputType
  }


  export type FunctionalGroupGroupByOutputType = {
    id: number
    title: string
    _count: FunctionalGroupCountAggregateOutputType | null
    _avg: FunctionalGroupAvgAggregateOutputType | null
    _sum: FunctionalGroupSumAggregateOutputType | null
    _min: FunctionalGroupMinAggregateOutputType | null
    _max: FunctionalGroupMaxAggregateOutputType | null
  }

  type GetFunctionalGroupGroupByPayload<T extends FunctionalGroupGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FunctionalGroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FunctionalGroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FunctionalGroupGroupByOutputType[P]>
            : GetScalarType<T[P], FunctionalGroupGroupByOutputType[P]>
        }
      >
    >


  export type FunctionalGroupSelect = {
    id?: boolean
    title?: boolean
  }


  export type FunctionalGroupGetPayload<S extends boolean | null | undefined | FunctionalGroupArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FunctionalGroup :
    S extends undefined ? never :
    S extends { include: any } & (FunctionalGroupArgs | FunctionalGroupFindManyArgs)
    ? FunctionalGroup 
    : S extends { select: any } & (FunctionalGroupArgs | FunctionalGroupFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof FunctionalGroup ? FunctionalGroup[P] : never
  } 
      : FunctionalGroup


  type FunctionalGroupCountArgs = Merge<
    Omit<FunctionalGroupFindManyArgs, 'select' | 'include'> & {
      select?: FunctionalGroupCountAggregateInputType | true
    }
  >

  export interface FunctionalGroupDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one FunctionalGroup that matches the filter.
     * @param {FunctionalGroupFindUniqueArgs} args - Arguments to find a FunctionalGroup
     * @example
     * // Get one FunctionalGroup
     * const functionalGroup = await prisma.functionalGroup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FunctionalGroupFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FunctionalGroupFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FunctionalGroup'> extends True ? Prisma__FunctionalGroupClient<FunctionalGroupGetPayload<T>> : Prisma__FunctionalGroupClient<FunctionalGroupGetPayload<T> | null, null>

    /**
     * Find the first FunctionalGroup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunctionalGroupFindFirstArgs} args - Arguments to find a FunctionalGroup
     * @example
     * // Get one FunctionalGroup
     * const functionalGroup = await prisma.functionalGroup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FunctionalGroupFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FunctionalGroupFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FunctionalGroup'> extends True ? Prisma__FunctionalGroupClient<FunctionalGroupGetPayload<T>> : Prisma__FunctionalGroupClient<FunctionalGroupGetPayload<T> | null, null>

    /**
     * Find zero or more FunctionalGroups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunctionalGroupFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FunctionalGroups
     * const functionalGroups = await prisma.functionalGroup.findMany()
     * 
     * // Get first 10 FunctionalGroups
     * const functionalGroups = await prisma.functionalGroup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const functionalGroupWithIdOnly = await prisma.functionalGroup.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FunctionalGroupFindManyArgs>(
      args?: SelectSubset<T, FunctionalGroupFindManyArgs>
    ): PrismaPromise<Array<FunctionalGroupGetPayload<T>>>

    /**
     * Create a FunctionalGroup.
     * @param {FunctionalGroupCreateArgs} args - Arguments to create a FunctionalGroup.
     * @example
     * // Create one FunctionalGroup
     * const FunctionalGroup = await prisma.functionalGroup.create({
     *   data: {
     *     // ... data to create a FunctionalGroup
     *   }
     * })
     * 
    **/
    create<T extends FunctionalGroupCreateArgs>(
      args: SelectSubset<T, FunctionalGroupCreateArgs>
    ): Prisma__FunctionalGroupClient<FunctionalGroupGetPayload<T>>

    /**
     * Create many FunctionalGroups.
     *     @param {FunctionalGroupCreateManyArgs} args - Arguments to create many FunctionalGroups.
     *     @example
     *     // Create many FunctionalGroups
     *     const functionalGroup = await prisma.functionalGroup.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FunctionalGroupCreateManyArgs>(
      args?: SelectSubset<T, FunctionalGroupCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a FunctionalGroup.
     * @param {FunctionalGroupDeleteArgs} args - Arguments to delete one FunctionalGroup.
     * @example
     * // Delete one FunctionalGroup
     * const FunctionalGroup = await prisma.functionalGroup.delete({
     *   where: {
     *     // ... filter to delete one FunctionalGroup
     *   }
     * })
     * 
    **/
    delete<T extends FunctionalGroupDeleteArgs>(
      args: SelectSubset<T, FunctionalGroupDeleteArgs>
    ): Prisma__FunctionalGroupClient<FunctionalGroupGetPayload<T>>

    /**
     * Update one FunctionalGroup.
     * @param {FunctionalGroupUpdateArgs} args - Arguments to update one FunctionalGroup.
     * @example
     * // Update one FunctionalGroup
     * const functionalGroup = await prisma.functionalGroup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FunctionalGroupUpdateArgs>(
      args: SelectSubset<T, FunctionalGroupUpdateArgs>
    ): Prisma__FunctionalGroupClient<FunctionalGroupGetPayload<T>>

    /**
     * Delete zero or more FunctionalGroups.
     * @param {FunctionalGroupDeleteManyArgs} args - Arguments to filter FunctionalGroups to delete.
     * @example
     * // Delete a few FunctionalGroups
     * const { count } = await prisma.functionalGroup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FunctionalGroupDeleteManyArgs>(
      args?: SelectSubset<T, FunctionalGroupDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more FunctionalGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunctionalGroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FunctionalGroups
     * const functionalGroup = await prisma.functionalGroup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FunctionalGroupUpdateManyArgs>(
      args: SelectSubset<T, FunctionalGroupUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one FunctionalGroup.
     * @param {FunctionalGroupUpsertArgs} args - Arguments to update or create a FunctionalGroup.
     * @example
     * // Update or create a FunctionalGroup
     * const functionalGroup = await prisma.functionalGroup.upsert({
     *   create: {
     *     // ... data to create a FunctionalGroup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FunctionalGroup we want to update
     *   }
     * })
    **/
    upsert<T extends FunctionalGroupUpsertArgs>(
      args: SelectSubset<T, FunctionalGroupUpsertArgs>
    ): Prisma__FunctionalGroupClient<FunctionalGroupGetPayload<T>>

    /**
     * Find one FunctionalGroup that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {FunctionalGroupFindUniqueOrThrowArgs} args - Arguments to find a FunctionalGroup
     * @example
     * // Get one FunctionalGroup
     * const functionalGroup = await prisma.functionalGroup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FunctionalGroupFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FunctionalGroupFindUniqueOrThrowArgs>
    ): Prisma__FunctionalGroupClient<FunctionalGroupGetPayload<T>>

    /**
     * Find the first FunctionalGroup that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunctionalGroupFindFirstOrThrowArgs} args - Arguments to find a FunctionalGroup
     * @example
     * // Get one FunctionalGroup
     * const functionalGroup = await prisma.functionalGroup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FunctionalGroupFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FunctionalGroupFindFirstOrThrowArgs>
    ): Prisma__FunctionalGroupClient<FunctionalGroupGetPayload<T>>

    /**
     * Count the number of FunctionalGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunctionalGroupCountArgs} args - Arguments to filter FunctionalGroups to count.
     * @example
     * // Count the number of FunctionalGroups
     * const count = await prisma.functionalGroup.count({
     *   where: {
     *     // ... the filter for the FunctionalGroups we want to count
     *   }
     * })
    **/
    count<T extends FunctionalGroupCountArgs>(
      args?: Subset<T, FunctionalGroupCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FunctionalGroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FunctionalGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunctionalGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FunctionalGroupAggregateArgs>(args: Subset<T, FunctionalGroupAggregateArgs>): PrismaPromise<GetFunctionalGroupAggregateType<T>>

    /**
     * Group by FunctionalGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunctionalGroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FunctionalGroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FunctionalGroupGroupByArgs['orderBy'] }
        : { orderBy?: FunctionalGroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FunctionalGroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFunctionalGroupGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FunctionalGroup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FunctionalGroupClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FunctionalGroup base type for findUnique actions
   */
  export type FunctionalGroupFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FunctionalGroup
     * 
    **/
    select?: FunctionalGroupSelect | null
    /**
     * Filter, which FunctionalGroup to fetch.
     * 
    **/
    where: FunctionalGroupWhereUniqueInput
  }

  /**
   * FunctionalGroup: findUnique
   */
  export interface FunctionalGroupFindUniqueArgs extends FunctionalGroupFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FunctionalGroup base type for findFirst actions
   */
  export type FunctionalGroupFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FunctionalGroup
     * 
    **/
    select?: FunctionalGroupSelect | null
    /**
     * Filter, which FunctionalGroup to fetch.
     * 
    **/
    where?: FunctionalGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FunctionalGroups to fetch.
     * 
    **/
    orderBy?: Enumerable<FunctionalGroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FunctionalGroups.
     * 
    **/
    cursor?: FunctionalGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FunctionalGroups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FunctionalGroups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FunctionalGroups.
     * 
    **/
    distinct?: Enumerable<FunctionalGroupScalarFieldEnum>
  }

  /**
   * FunctionalGroup: findFirst
   */
  export interface FunctionalGroupFindFirstArgs extends FunctionalGroupFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FunctionalGroup findMany
   */
  export type FunctionalGroupFindManyArgs = {
    /**
     * Select specific fields to fetch from the FunctionalGroup
     * 
    **/
    select?: FunctionalGroupSelect | null
    /**
     * Filter, which FunctionalGroups to fetch.
     * 
    **/
    where?: FunctionalGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FunctionalGroups to fetch.
     * 
    **/
    orderBy?: Enumerable<FunctionalGroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FunctionalGroups.
     * 
    **/
    cursor?: FunctionalGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FunctionalGroups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FunctionalGroups.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FunctionalGroupScalarFieldEnum>
  }


  /**
   * FunctionalGroup create
   */
  export type FunctionalGroupCreateArgs = {
    /**
     * Select specific fields to fetch from the FunctionalGroup
     * 
    **/
    select?: FunctionalGroupSelect | null
    /**
     * The data needed to create a FunctionalGroup.
     * 
    **/
    data: XOR<FunctionalGroupCreateInput, FunctionalGroupUncheckedCreateInput>
  }


  /**
   * FunctionalGroup createMany
   */
  export type FunctionalGroupCreateManyArgs = {
    /**
     * The data used to create many FunctionalGroups.
     * 
    **/
    data: Enumerable<FunctionalGroupCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FunctionalGroup update
   */
  export type FunctionalGroupUpdateArgs = {
    /**
     * Select specific fields to fetch from the FunctionalGroup
     * 
    **/
    select?: FunctionalGroupSelect | null
    /**
     * The data needed to update a FunctionalGroup.
     * 
    **/
    data: XOR<FunctionalGroupUpdateInput, FunctionalGroupUncheckedUpdateInput>
    /**
     * Choose, which FunctionalGroup to update.
     * 
    **/
    where: FunctionalGroupWhereUniqueInput
  }


  /**
   * FunctionalGroup updateMany
   */
  export type FunctionalGroupUpdateManyArgs = {
    /**
     * The data used to update FunctionalGroups.
     * 
    **/
    data: XOR<FunctionalGroupUpdateManyMutationInput, FunctionalGroupUncheckedUpdateManyInput>
    /**
     * Filter which FunctionalGroups to update
     * 
    **/
    where?: FunctionalGroupWhereInput
  }


  /**
   * FunctionalGroup upsert
   */
  export type FunctionalGroupUpsertArgs = {
    /**
     * Select specific fields to fetch from the FunctionalGroup
     * 
    **/
    select?: FunctionalGroupSelect | null
    /**
     * The filter to search for the FunctionalGroup to update in case it exists.
     * 
    **/
    where: FunctionalGroupWhereUniqueInput
    /**
     * In case the FunctionalGroup found by the `where` argument doesn't exist, create a new FunctionalGroup with this data.
     * 
    **/
    create: XOR<FunctionalGroupCreateInput, FunctionalGroupUncheckedCreateInput>
    /**
     * In case the FunctionalGroup was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FunctionalGroupUpdateInput, FunctionalGroupUncheckedUpdateInput>
  }


  /**
   * FunctionalGroup delete
   */
  export type FunctionalGroupDeleteArgs = {
    /**
     * Select specific fields to fetch from the FunctionalGroup
     * 
    **/
    select?: FunctionalGroupSelect | null
    /**
     * Filter which FunctionalGroup to delete.
     * 
    **/
    where: FunctionalGroupWhereUniqueInput
  }


  /**
   * FunctionalGroup deleteMany
   */
  export type FunctionalGroupDeleteManyArgs = {
    /**
     * Filter which FunctionalGroups to delete
     * 
    **/
    where?: FunctionalGroupWhereInput
  }


  /**
   * FunctionalGroup: findUniqueOrThrow
   */
  export type FunctionalGroupFindUniqueOrThrowArgs = FunctionalGroupFindUniqueArgsBase
      

  /**
   * FunctionalGroup: findFirstOrThrow
   */
  export type FunctionalGroupFindFirstOrThrowArgs = FunctionalGroupFindFirstArgsBase
      

  /**
   * FunctionalGroup without action
   */
  export type FunctionalGroupArgs = {
    /**
     * Select specific fields to fetch from the FunctionalGroup
     * 
    **/
    select?: FunctionalGroupSelect | null
  }



  /**
   * Model UserTask
   */


  export type AggregateUserTask = {
    _count: UserTaskCountAggregateOutputType | null
    _avg: UserTaskAvgAggregateOutputType | null
    _sum: UserTaskSumAggregateOutputType | null
    _min: UserTaskMinAggregateOutputType | null
    _max: UserTaskMaxAggregateOutputType | null
  }

  export type UserTaskAvgAggregateOutputType = {
    id: number | null
  }

  export type UserTaskSumAggregateOutputType = {
    id: number | null
  }

  export type UserTaskMinAggregateOutputType = {
    id: number | null
    userid: string | null
    tasktTemplateId: string | null
    completedAt: string | null
    comment: string | null
    location: string | null
    status: string | null
    taskType: string | null
  }

  export type UserTaskMaxAggregateOutputType = {
    id: number | null
    userid: string | null
    tasktTemplateId: string | null
    completedAt: string | null
    comment: string | null
    location: string | null
    status: string | null
    taskType: string | null
  }

  export type UserTaskCountAggregateOutputType = {
    id: number
    userid: number
    tasktTemplateId: number
    completedAt: number
    comment: number
    location: number
    status: number
    taskType: number
    _all: number
  }


  export type UserTaskAvgAggregateInputType = {
    id?: true
  }

  export type UserTaskSumAggregateInputType = {
    id?: true
  }

  export type UserTaskMinAggregateInputType = {
    id?: true
    userid?: true
    tasktTemplateId?: true
    completedAt?: true
    comment?: true
    location?: true
    status?: true
    taskType?: true
  }

  export type UserTaskMaxAggregateInputType = {
    id?: true
    userid?: true
    tasktTemplateId?: true
    completedAt?: true
    comment?: true
    location?: true
    status?: true
    taskType?: true
  }

  export type UserTaskCountAggregateInputType = {
    id?: true
    userid?: true
    tasktTemplateId?: true
    completedAt?: true
    comment?: true
    location?: true
    status?: true
    taskType?: true
    _all?: true
  }

  export type UserTaskAggregateArgs = {
    /**
     * Filter which UserTask to aggregate.
     * 
    **/
    where?: UserTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTasks to fetch.
     * 
    **/
    orderBy?: Enumerable<UserTaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTasks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTasks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserTasks
    **/
    _count?: true | UserTaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserTaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserTaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserTaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserTaskMaxAggregateInputType
  }

  export type GetUserTaskAggregateType<T extends UserTaskAggregateArgs> = {
        [P in keyof T & keyof AggregateUserTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserTask[P]>
      : GetScalarType<T[P], AggregateUserTask[P]>
  }




  export type UserTaskGroupByArgs = {
    where?: UserTaskWhereInput
    orderBy?: Enumerable<UserTaskOrderByWithAggregationInput>
    by: Array<UserTaskScalarFieldEnum>
    having?: UserTaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserTaskCountAggregateInputType | true
    _avg?: UserTaskAvgAggregateInputType
    _sum?: UserTaskSumAggregateInputType
    _min?: UserTaskMinAggregateInputType
    _max?: UserTaskMaxAggregateInputType
  }


  export type UserTaskGroupByOutputType = {
    id: number
    userid: string
    tasktTemplateId: string
    completedAt: string
    comment: string
    location: string
    status: string
    taskType: string
    _count: UserTaskCountAggregateOutputType | null
    _avg: UserTaskAvgAggregateOutputType | null
    _sum: UserTaskSumAggregateOutputType | null
    _min: UserTaskMinAggregateOutputType | null
    _max: UserTaskMaxAggregateOutputType | null
  }

  type GetUserTaskGroupByPayload<T extends UserTaskGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserTaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserTaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserTaskGroupByOutputType[P]>
            : GetScalarType<T[P], UserTaskGroupByOutputType[P]>
        }
      >
    >


  export type UserTaskSelect = {
    id?: boolean
    userid?: boolean
    tasktTemplateId?: boolean
    completedAt?: boolean
    comment?: boolean
    location?: boolean
    status?: boolean
    taskType?: boolean
  }


  export type UserTaskGetPayload<S extends boolean | null | undefined | UserTaskArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserTask :
    S extends undefined ? never :
    S extends { include: any } & (UserTaskArgs | UserTaskFindManyArgs)
    ? UserTask 
    : S extends { select: any } & (UserTaskArgs | UserTaskFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserTask ? UserTask[P] : never
  } 
      : UserTask


  type UserTaskCountArgs = Merge<
    Omit<UserTaskFindManyArgs, 'select' | 'include'> & {
      select?: UserTaskCountAggregateInputType | true
    }
  >

  export interface UserTaskDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one UserTask that matches the filter.
     * @param {UserTaskFindUniqueArgs} args - Arguments to find a UserTask
     * @example
     * // Get one UserTask
     * const userTask = await prisma.userTask.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserTaskFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserTaskFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserTask'> extends True ? Prisma__UserTaskClient<UserTaskGetPayload<T>> : Prisma__UserTaskClient<UserTaskGetPayload<T> | null, null>

    /**
     * Find the first UserTask that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaskFindFirstArgs} args - Arguments to find a UserTask
     * @example
     * // Get one UserTask
     * const userTask = await prisma.userTask.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserTaskFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserTaskFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserTask'> extends True ? Prisma__UserTaskClient<UserTaskGetPayload<T>> : Prisma__UserTaskClient<UserTaskGetPayload<T> | null, null>

    /**
     * Find zero or more UserTasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaskFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserTasks
     * const userTasks = await prisma.userTask.findMany()
     * 
     * // Get first 10 UserTasks
     * const userTasks = await prisma.userTask.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userTaskWithIdOnly = await prisma.userTask.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserTaskFindManyArgs>(
      args?: SelectSubset<T, UserTaskFindManyArgs>
    ): PrismaPromise<Array<UserTaskGetPayload<T>>>

    /**
     * Create a UserTask.
     * @param {UserTaskCreateArgs} args - Arguments to create a UserTask.
     * @example
     * // Create one UserTask
     * const UserTask = await prisma.userTask.create({
     *   data: {
     *     // ... data to create a UserTask
     *   }
     * })
     * 
    **/
    create<T extends UserTaskCreateArgs>(
      args: SelectSubset<T, UserTaskCreateArgs>
    ): Prisma__UserTaskClient<UserTaskGetPayload<T>>

    /**
     * Create many UserTasks.
     *     @param {UserTaskCreateManyArgs} args - Arguments to create many UserTasks.
     *     @example
     *     // Create many UserTasks
     *     const userTask = await prisma.userTask.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserTaskCreateManyArgs>(
      args?: SelectSubset<T, UserTaskCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserTask.
     * @param {UserTaskDeleteArgs} args - Arguments to delete one UserTask.
     * @example
     * // Delete one UserTask
     * const UserTask = await prisma.userTask.delete({
     *   where: {
     *     // ... filter to delete one UserTask
     *   }
     * })
     * 
    **/
    delete<T extends UserTaskDeleteArgs>(
      args: SelectSubset<T, UserTaskDeleteArgs>
    ): Prisma__UserTaskClient<UserTaskGetPayload<T>>

    /**
     * Update one UserTask.
     * @param {UserTaskUpdateArgs} args - Arguments to update one UserTask.
     * @example
     * // Update one UserTask
     * const userTask = await prisma.userTask.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserTaskUpdateArgs>(
      args: SelectSubset<T, UserTaskUpdateArgs>
    ): Prisma__UserTaskClient<UserTaskGetPayload<T>>

    /**
     * Delete zero or more UserTasks.
     * @param {UserTaskDeleteManyArgs} args - Arguments to filter UserTasks to delete.
     * @example
     * // Delete a few UserTasks
     * const { count } = await prisma.userTask.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserTaskDeleteManyArgs>(
      args?: SelectSubset<T, UserTaskDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserTasks
     * const userTask = await prisma.userTask.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserTaskUpdateManyArgs>(
      args: SelectSubset<T, UserTaskUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserTask.
     * @param {UserTaskUpsertArgs} args - Arguments to update or create a UserTask.
     * @example
     * // Update or create a UserTask
     * const userTask = await prisma.userTask.upsert({
     *   create: {
     *     // ... data to create a UserTask
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserTask we want to update
     *   }
     * })
    **/
    upsert<T extends UserTaskUpsertArgs>(
      args: SelectSubset<T, UserTaskUpsertArgs>
    ): Prisma__UserTaskClient<UserTaskGetPayload<T>>

    /**
     * Find one UserTask that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserTaskFindUniqueOrThrowArgs} args - Arguments to find a UserTask
     * @example
     * // Get one UserTask
     * const userTask = await prisma.userTask.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserTaskFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserTaskFindUniqueOrThrowArgs>
    ): Prisma__UserTaskClient<UserTaskGetPayload<T>>

    /**
     * Find the first UserTask that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaskFindFirstOrThrowArgs} args - Arguments to find a UserTask
     * @example
     * // Get one UserTask
     * const userTask = await prisma.userTask.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserTaskFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserTaskFindFirstOrThrowArgs>
    ): Prisma__UserTaskClient<UserTaskGetPayload<T>>

    /**
     * Count the number of UserTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaskCountArgs} args - Arguments to filter UserTasks to count.
     * @example
     * // Count the number of UserTasks
     * const count = await prisma.userTask.count({
     *   where: {
     *     // ... the filter for the UserTasks we want to count
     *   }
     * })
    **/
    count<T extends UserTaskCountArgs>(
      args?: Subset<T, UserTaskCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserTaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserTaskAggregateArgs>(args: Subset<T, UserTaskAggregateArgs>): PrismaPromise<GetUserTaskAggregateType<T>>

    /**
     * Group by UserTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserTaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserTaskGroupByArgs['orderBy'] }
        : { orderBy?: UserTaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserTaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserTaskGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserTask.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserTaskClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserTask base type for findUnique actions
   */
  export type UserTaskFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserTask
     * 
    **/
    select?: UserTaskSelect | null
    /**
     * Filter, which UserTask to fetch.
     * 
    **/
    where: UserTaskWhereUniqueInput
  }

  /**
   * UserTask: findUnique
   */
  export interface UserTaskFindUniqueArgs extends UserTaskFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserTask base type for findFirst actions
   */
  export type UserTaskFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserTask
     * 
    **/
    select?: UserTaskSelect | null
    /**
     * Filter, which UserTask to fetch.
     * 
    **/
    where?: UserTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTasks to fetch.
     * 
    **/
    orderBy?: Enumerable<UserTaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTasks.
     * 
    **/
    cursor?: UserTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTasks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTasks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTasks.
     * 
    **/
    distinct?: Enumerable<UserTaskScalarFieldEnum>
  }

  /**
   * UserTask: findFirst
   */
  export interface UserTaskFindFirstArgs extends UserTaskFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserTask findMany
   */
  export type UserTaskFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserTask
     * 
    **/
    select?: UserTaskSelect | null
    /**
     * Filter, which UserTasks to fetch.
     * 
    **/
    where?: UserTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTasks to fetch.
     * 
    **/
    orderBy?: Enumerable<UserTaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserTasks.
     * 
    **/
    cursor?: UserTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTasks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTasks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserTaskScalarFieldEnum>
  }


  /**
   * UserTask create
   */
  export type UserTaskCreateArgs = {
    /**
     * Select specific fields to fetch from the UserTask
     * 
    **/
    select?: UserTaskSelect | null
    /**
     * The data needed to create a UserTask.
     * 
    **/
    data: XOR<UserTaskCreateInput, UserTaskUncheckedCreateInput>
  }


  /**
   * UserTask createMany
   */
  export type UserTaskCreateManyArgs = {
    /**
     * The data used to create many UserTasks.
     * 
    **/
    data: Enumerable<UserTaskCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserTask update
   */
  export type UserTaskUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserTask
     * 
    **/
    select?: UserTaskSelect | null
    /**
     * The data needed to update a UserTask.
     * 
    **/
    data: XOR<UserTaskUpdateInput, UserTaskUncheckedUpdateInput>
    /**
     * Choose, which UserTask to update.
     * 
    **/
    where: UserTaskWhereUniqueInput
  }


  /**
   * UserTask updateMany
   */
  export type UserTaskUpdateManyArgs = {
    /**
     * The data used to update UserTasks.
     * 
    **/
    data: XOR<UserTaskUpdateManyMutationInput, UserTaskUncheckedUpdateManyInput>
    /**
     * Filter which UserTasks to update
     * 
    **/
    where?: UserTaskWhereInput
  }


  /**
   * UserTask upsert
   */
  export type UserTaskUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserTask
     * 
    **/
    select?: UserTaskSelect | null
    /**
     * The filter to search for the UserTask to update in case it exists.
     * 
    **/
    where: UserTaskWhereUniqueInput
    /**
     * In case the UserTask found by the `where` argument doesn't exist, create a new UserTask with this data.
     * 
    **/
    create: XOR<UserTaskCreateInput, UserTaskUncheckedCreateInput>
    /**
     * In case the UserTask was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserTaskUpdateInput, UserTaskUncheckedUpdateInput>
  }


  /**
   * UserTask delete
   */
  export type UserTaskDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserTask
     * 
    **/
    select?: UserTaskSelect | null
    /**
     * Filter which UserTask to delete.
     * 
    **/
    where: UserTaskWhereUniqueInput
  }


  /**
   * UserTask deleteMany
   */
  export type UserTaskDeleteManyArgs = {
    /**
     * Filter which UserTasks to delete
     * 
    **/
    where?: UserTaskWhereInput
  }


  /**
   * UserTask: findUniqueOrThrow
   */
  export type UserTaskFindUniqueOrThrowArgs = UserTaskFindUniqueArgsBase
      

  /**
   * UserTask: findFirstOrThrow
   */
  export type UserTaskFindFirstOrThrowArgs = UserTaskFindFirstArgsBase
      

  /**
   * UserTask without action
   */
  export type UserTaskArgs = {
    /**
     * Select specific fields to fetch from the UserTask
     * 
    **/
    select?: UserTaskSelect | null
  }



  /**
   * Model Links
   */


  export type AggregateLinks = {
    _count: LinksCountAggregateOutputType | null
    _avg: LinksAvgAggregateOutputType | null
    _sum: LinksSumAggregateOutputType | null
    _min: LinksMinAggregateOutputType | null
    _max: LinksMaxAggregateOutputType | null
  }

  export type LinksAvgAggregateOutputType = {
    id: number | null
  }

  export type LinksSumAggregateOutputType = {
    id: number | null
  }

  export type LinksMinAggregateOutputType = {
    id: number | null
    title: string | null
    href: string | null
  }

  export type LinksMaxAggregateOutputType = {
    id: number | null
    title: string | null
    href: string | null
  }

  export type LinksCountAggregateOutputType = {
    id: number
    title: number
    href: number
    _all: number
  }


  export type LinksAvgAggregateInputType = {
    id?: true
  }

  export type LinksSumAggregateInputType = {
    id?: true
  }

  export type LinksMinAggregateInputType = {
    id?: true
    title?: true
    href?: true
  }

  export type LinksMaxAggregateInputType = {
    id?: true
    title?: true
    href?: true
  }

  export type LinksCountAggregateInputType = {
    id?: true
    title?: true
    href?: true
    _all?: true
  }

  export type LinksAggregateArgs = {
    /**
     * Filter which Links to aggregate.
     * 
    **/
    where?: LinksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Links to fetch.
     * 
    **/
    orderBy?: Enumerable<LinksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LinksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Links from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Links.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Links
    **/
    _count?: true | LinksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LinksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LinksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LinksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LinksMaxAggregateInputType
  }

  export type GetLinksAggregateType<T extends LinksAggregateArgs> = {
        [P in keyof T & keyof AggregateLinks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLinks[P]>
      : GetScalarType<T[P], AggregateLinks[P]>
  }




  export type LinksGroupByArgs = {
    where?: LinksWhereInput
    orderBy?: Enumerable<LinksOrderByWithAggregationInput>
    by: Array<LinksScalarFieldEnum>
    having?: LinksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LinksCountAggregateInputType | true
    _avg?: LinksAvgAggregateInputType
    _sum?: LinksSumAggregateInputType
    _min?: LinksMinAggregateInputType
    _max?: LinksMaxAggregateInputType
  }


  export type LinksGroupByOutputType = {
    id: number
    title: string
    href: string | null
    _count: LinksCountAggregateOutputType | null
    _avg: LinksAvgAggregateOutputType | null
    _sum: LinksSumAggregateOutputType | null
    _min: LinksMinAggregateOutputType | null
    _max: LinksMaxAggregateOutputType | null
  }

  type GetLinksGroupByPayload<T extends LinksGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LinksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LinksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LinksGroupByOutputType[P]>
            : GetScalarType<T[P], LinksGroupByOutputType[P]>
        }
      >
    >


  export type LinksSelect = {
    id?: boolean
    title?: boolean
    href?: boolean
  }


  export type LinksGetPayload<S extends boolean | null | undefined | LinksArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Links :
    S extends undefined ? never :
    S extends { include: any } & (LinksArgs | LinksFindManyArgs)
    ? Links 
    : S extends { select: any } & (LinksArgs | LinksFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Links ? Links[P] : never
  } 
      : Links


  type LinksCountArgs = Merge<
    Omit<LinksFindManyArgs, 'select' | 'include'> & {
      select?: LinksCountAggregateInputType | true
    }
  >

  export interface LinksDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Links that matches the filter.
     * @param {LinksFindUniqueArgs} args - Arguments to find a Links
     * @example
     * // Get one Links
     * const links = await prisma.links.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LinksFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LinksFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Links'> extends True ? Prisma__LinksClient<LinksGetPayload<T>> : Prisma__LinksClient<LinksGetPayload<T> | null, null>

    /**
     * Find the first Links that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinksFindFirstArgs} args - Arguments to find a Links
     * @example
     * // Get one Links
     * const links = await prisma.links.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LinksFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LinksFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Links'> extends True ? Prisma__LinksClient<LinksGetPayload<T>> : Prisma__LinksClient<LinksGetPayload<T> | null, null>

    /**
     * Find zero or more Links that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Links
     * const links = await prisma.links.findMany()
     * 
     * // Get first 10 Links
     * const links = await prisma.links.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const linksWithIdOnly = await prisma.links.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LinksFindManyArgs>(
      args?: SelectSubset<T, LinksFindManyArgs>
    ): PrismaPromise<Array<LinksGetPayload<T>>>

    /**
     * Create a Links.
     * @param {LinksCreateArgs} args - Arguments to create a Links.
     * @example
     * // Create one Links
     * const Links = await prisma.links.create({
     *   data: {
     *     // ... data to create a Links
     *   }
     * })
     * 
    **/
    create<T extends LinksCreateArgs>(
      args: SelectSubset<T, LinksCreateArgs>
    ): Prisma__LinksClient<LinksGetPayload<T>>

    /**
     * Create many Links.
     *     @param {LinksCreateManyArgs} args - Arguments to create many Links.
     *     @example
     *     // Create many Links
     *     const links = await prisma.links.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LinksCreateManyArgs>(
      args?: SelectSubset<T, LinksCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Links.
     * @param {LinksDeleteArgs} args - Arguments to delete one Links.
     * @example
     * // Delete one Links
     * const Links = await prisma.links.delete({
     *   where: {
     *     // ... filter to delete one Links
     *   }
     * })
     * 
    **/
    delete<T extends LinksDeleteArgs>(
      args: SelectSubset<T, LinksDeleteArgs>
    ): Prisma__LinksClient<LinksGetPayload<T>>

    /**
     * Update one Links.
     * @param {LinksUpdateArgs} args - Arguments to update one Links.
     * @example
     * // Update one Links
     * const links = await prisma.links.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LinksUpdateArgs>(
      args: SelectSubset<T, LinksUpdateArgs>
    ): Prisma__LinksClient<LinksGetPayload<T>>

    /**
     * Delete zero or more Links.
     * @param {LinksDeleteManyArgs} args - Arguments to filter Links to delete.
     * @example
     * // Delete a few Links
     * const { count } = await prisma.links.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LinksDeleteManyArgs>(
      args?: SelectSubset<T, LinksDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Links.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Links
     * const links = await prisma.links.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LinksUpdateManyArgs>(
      args: SelectSubset<T, LinksUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Links.
     * @param {LinksUpsertArgs} args - Arguments to update or create a Links.
     * @example
     * // Update or create a Links
     * const links = await prisma.links.upsert({
     *   create: {
     *     // ... data to create a Links
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Links we want to update
     *   }
     * })
    **/
    upsert<T extends LinksUpsertArgs>(
      args: SelectSubset<T, LinksUpsertArgs>
    ): Prisma__LinksClient<LinksGetPayload<T>>

    /**
     * Find one Links that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {LinksFindUniqueOrThrowArgs} args - Arguments to find a Links
     * @example
     * // Get one Links
     * const links = await prisma.links.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LinksFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LinksFindUniqueOrThrowArgs>
    ): Prisma__LinksClient<LinksGetPayload<T>>

    /**
     * Find the first Links that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinksFindFirstOrThrowArgs} args - Arguments to find a Links
     * @example
     * // Get one Links
     * const links = await prisma.links.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LinksFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LinksFindFirstOrThrowArgs>
    ): Prisma__LinksClient<LinksGetPayload<T>>

    /**
     * Count the number of Links.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinksCountArgs} args - Arguments to filter Links to count.
     * @example
     * // Count the number of Links
     * const count = await prisma.links.count({
     *   where: {
     *     // ... the filter for the Links we want to count
     *   }
     * })
    **/
    count<T extends LinksCountArgs>(
      args?: Subset<T, LinksCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LinksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Links.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LinksAggregateArgs>(args: Subset<T, LinksAggregateArgs>): PrismaPromise<GetLinksAggregateType<T>>

    /**
     * Group by Links.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LinksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LinksGroupByArgs['orderBy'] }
        : { orderBy?: LinksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LinksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLinksGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Links.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LinksClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Links base type for findUnique actions
   */
  export type LinksFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Links
     * 
    **/
    select?: LinksSelect | null
    /**
     * Filter, which Links to fetch.
     * 
    **/
    where: LinksWhereUniqueInput
  }

  /**
   * Links: findUnique
   */
  export interface LinksFindUniqueArgs extends LinksFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Links base type for findFirst actions
   */
  export type LinksFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Links
     * 
    **/
    select?: LinksSelect | null
    /**
     * Filter, which Links to fetch.
     * 
    **/
    where?: LinksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Links to fetch.
     * 
    **/
    orderBy?: Enumerable<LinksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Links.
     * 
    **/
    cursor?: LinksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Links from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Links.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Links.
     * 
    **/
    distinct?: Enumerable<LinksScalarFieldEnum>
  }

  /**
   * Links: findFirst
   */
  export interface LinksFindFirstArgs extends LinksFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Links findMany
   */
  export type LinksFindManyArgs = {
    /**
     * Select specific fields to fetch from the Links
     * 
    **/
    select?: LinksSelect | null
    /**
     * Filter, which Links to fetch.
     * 
    **/
    where?: LinksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Links to fetch.
     * 
    **/
    orderBy?: Enumerable<LinksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Links.
     * 
    **/
    cursor?: LinksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Links from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Links.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LinksScalarFieldEnum>
  }


  /**
   * Links create
   */
  export type LinksCreateArgs = {
    /**
     * Select specific fields to fetch from the Links
     * 
    **/
    select?: LinksSelect | null
    /**
     * The data needed to create a Links.
     * 
    **/
    data: XOR<LinksCreateInput, LinksUncheckedCreateInput>
  }


  /**
   * Links createMany
   */
  export type LinksCreateManyArgs = {
    /**
     * The data used to create many Links.
     * 
    **/
    data: Enumerable<LinksCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Links update
   */
  export type LinksUpdateArgs = {
    /**
     * Select specific fields to fetch from the Links
     * 
    **/
    select?: LinksSelect | null
    /**
     * The data needed to update a Links.
     * 
    **/
    data: XOR<LinksUpdateInput, LinksUncheckedUpdateInput>
    /**
     * Choose, which Links to update.
     * 
    **/
    where: LinksWhereUniqueInput
  }


  /**
   * Links updateMany
   */
  export type LinksUpdateManyArgs = {
    /**
     * The data used to update Links.
     * 
    **/
    data: XOR<LinksUpdateManyMutationInput, LinksUncheckedUpdateManyInput>
    /**
     * Filter which Links to update
     * 
    **/
    where?: LinksWhereInput
  }


  /**
   * Links upsert
   */
  export type LinksUpsertArgs = {
    /**
     * Select specific fields to fetch from the Links
     * 
    **/
    select?: LinksSelect | null
    /**
     * The filter to search for the Links to update in case it exists.
     * 
    **/
    where: LinksWhereUniqueInput
    /**
     * In case the Links found by the `where` argument doesn't exist, create a new Links with this data.
     * 
    **/
    create: XOR<LinksCreateInput, LinksUncheckedCreateInput>
    /**
     * In case the Links was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LinksUpdateInput, LinksUncheckedUpdateInput>
  }


  /**
   * Links delete
   */
  export type LinksDeleteArgs = {
    /**
     * Select specific fields to fetch from the Links
     * 
    **/
    select?: LinksSelect | null
    /**
     * Filter which Links to delete.
     * 
    **/
    where: LinksWhereUniqueInput
  }


  /**
   * Links deleteMany
   */
  export type LinksDeleteManyArgs = {
    /**
     * Filter which Links to delete
     * 
    **/
    where?: LinksWhereInput
  }


  /**
   * Links: findUniqueOrThrow
   */
  export type LinksFindUniqueOrThrowArgs = LinksFindUniqueArgsBase
      

  /**
   * Links: findFirstOrThrow
   */
  export type LinksFindFirstOrThrowArgs = LinksFindFirstArgsBase
      

  /**
   * Links without action
   */
  export type LinksArgs = {
    /**
     * Select specific fields to fetch from the Links
     * 
    **/
    select?: LinksSelect | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
    phone_number: string | null
    country_code: string | null
    status: string | null
    is_archived: boolean | null
    last_active_at: string | null
    role: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
    phone_number: string | null
    country_code: string | null
    status: string | null
    is_archived: boolean | null
    last_active_at: string | null
    role: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    first_name: number
    last_name: number
    email: number
    phone_number: number
    country_code: number
    status: number
    is_archived: number
    last_active_at: number
    role: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
    phone_number?: true
    country_code?: true
    status?: true
    is_archived?: true
    last_active_at?: true
    role?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
    phone_number?: true
    country_code?: true
    status?: true
    is_archived?: true
    last_active_at?: true
    role?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
    phone_number?: true
    country_code?: true
    status?: true
    is_archived?: true
    last_active_at?: true
    role?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    first_name: string
    last_name: string | null
    email: string | null
    phone_number: string | null
    country_code: string | null
    status: string | null
    is_archived: boolean
    last_active_at: string | null
    role: string
    password: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    phone_number?: boolean
    country_code?: boolean
    status?: boolean
    is_archived?: boolean
    last_active_at?: boolean
    role?: boolean
    password?: boolean
  }


  export type UserGetPayload<S extends boolean | null | undefined | UserArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const FunctionalGroupScalarFieldEnum: {
    id: 'id',
    title: 'title'
  };

  export type FunctionalGroupScalarFieldEnum = (typeof FunctionalGroupScalarFieldEnum)[keyof typeof FunctionalGroupScalarFieldEnum]


  export const GroupScalarFieldEnum: {
    id: 'id',
    groupName: 'groupName',
    description: 'description'
  };

  export type GroupScalarFieldEnum = (typeof GroupScalarFieldEnum)[keyof typeof GroupScalarFieldEnum]


  export const GroupUserScalarFieldEnum: {
    id: 'id',
    userid: 'userid',
    createdBy: 'createdBy',
    groupid: 'groupid'
  };

  export type GroupUserScalarFieldEnum = (typeof GroupUserScalarFieldEnum)[keyof typeof GroupUserScalarFieldEnum]


  export const LinksScalarFieldEnum: {
    id: 'id',
    title: 'title',
    href: 'href'
  };

  export type LinksScalarFieldEnum = (typeof LinksScalarFieldEnum)[keyof typeof LinksScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TaskTemplateScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    category: 'category',
    groupId: 'groupId',
    startsAt: 'startsAt',
    endsAt: 'endsAt',
    repeatDialy: 'repeatDialy',
    functionalGroup: 'functionalGroup'
  };

  export type TaskTemplateScalarFieldEnum = (typeof TaskTemplateScalarFieldEnum)[keyof typeof TaskTemplateScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserActivityLoggerScalarFieldEnum: {
    id: 'id',
    userid: 'userid',
    event: 'event',
    usertaskid: 'usertaskid',
    location: 'location'
  };

  export type UserActivityLoggerScalarFieldEnum = (typeof UserActivityLoggerScalarFieldEnum)[keyof typeof UserActivityLoggerScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    first_name: 'first_name',
    last_name: 'last_name',
    email: 'email',
    phone_number: 'phone_number',
    country_code: 'country_code',
    status: 'status',
    is_archived: 'is_archived',
    last_active_at: 'last_active_at',
    role: 'role',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserTaskScalarFieldEnum: {
    id: 'id',
    userid: 'userid',
    tasktTemplateId: 'tasktTemplateId',
    completedAt: 'completedAt',
    comment: 'comment',
    location: 'location',
    status: 'status',
    taskType: 'taskType'
  };

  export type UserTaskScalarFieldEnum = (typeof UserTaskScalarFieldEnum)[keyof typeof UserTaskScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type GroupWhereInput = {
    AND?: Enumerable<GroupWhereInput>
    OR?: Enumerable<GroupWhereInput>
    NOT?: Enumerable<GroupWhereInput>
    id?: IntFilter | number
    groupName?: StringFilter | string
    description?: StringNullableFilter | string | null
  }

  export type GroupOrderByWithRelationInput = {
    id?: SortOrder
    groupName?: SortOrder
    description?: SortOrder
  }

  export type GroupWhereUniqueInput = {
    id?: number
  }

  export type GroupOrderByWithAggregationInput = {
    id?: SortOrder
    groupName?: SortOrder
    description?: SortOrder
    _count?: GroupCountOrderByAggregateInput
    _avg?: GroupAvgOrderByAggregateInput
    _max?: GroupMaxOrderByAggregateInput
    _min?: GroupMinOrderByAggregateInput
    _sum?: GroupSumOrderByAggregateInput
  }

  export type GroupScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    groupName?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
  }

  export type GroupUserWhereInput = {
    AND?: Enumerable<GroupUserWhereInput>
    OR?: Enumerable<GroupUserWhereInput>
    NOT?: Enumerable<GroupUserWhereInput>
    id?: IntFilter | number
    userid?: StringNullableListFilter
    createdBy?: StringFilter | string
    groupid?: StringFilter | string
  }

  export type GroupUserOrderByWithRelationInput = {
    id?: SortOrder
    userid?: SortOrder
    createdBy?: SortOrder
    groupid?: SortOrder
  }

  export type GroupUserWhereUniqueInput = {
    id?: number
  }

  export type GroupUserOrderByWithAggregationInput = {
    id?: SortOrder
    userid?: SortOrder
    createdBy?: SortOrder
    groupid?: SortOrder
    _count?: GroupUserCountOrderByAggregateInput
    _avg?: GroupUserAvgOrderByAggregateInput
    _max?: GroupUserMaxOrderByAggregateInput
    _min?: GroupUserMinOrderByAggregateInput
    _sum?: GroupUserSumOrderByAggregateInput
  }

  export type GroupUserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupUserScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupUserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupUserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userid?: StringNullableListFilter
    createdBy?: StringWithAggregatesFilter | string
    groupid?: StringWithAggregatesFilter | string
  }

  export type UserActivityLoggerWhereInput = {
    AND?: Enumerable<UserActivityLoggerWhereInput>
    OR?: Enumerable<UserActivityLoggerWhereInput>
    NOT?: Enumerable<UserActivityLoggerWhereInput>
    id?: IntFilter | number
    userid?: StringFilter | string
    event?: StringFilter | string
    usertaskid?: StringFilter | string
    location?: StringFilter | string
  }

  export type UserActivityLoggerOrderByWithRelationInput = {
    id?: SortOrder
    userid?: SortOrder
    event?: SortOrder
    usertaskid?: SortOrder
    location?: SortOrder
  }

  export type UserActivityLoggerWhereUniqueInput = {
    id?: number
  }

  export type UserActivityLoggerOrderByWithAggregationInput = {
    id?: SortOrder
    userid?: SortOrder
    event?: SortOrder
    usertaskid?: SortOrder
    location?: SortOrder
    _count?: UserActivityLoggerCountOrderByAggregateInput
    _avg?: UserActivityLoggerAvgOrderByAggregateInput
    _max?: UserActivityLoggerMaxOrderByAggregateInput
    _min?: UserActivityLoggerMinOrderByAggregateInput
    _sum?: UserActivityLoggerSumOrderByAggregateInput
  }

  export type UserActivityLoggerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserActivityLoggerScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserActivityLoggerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserActivityLoggerScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userid?: StringWithAggregatesFilter | string
    event?: StringWithAggregatesFilter | string
    usertaskid?: StringWithAggregatesFilter | string
    location?: StringWithAggregatesFilter | string
  }

  export type TaskTemplateWhereInput = {
    AND?: Enumerable<TaskTemplateWhereInput>
    OR?: Enumerable<TaskTemplateWhereInput>
    NOT?: Enumerable<TaskTemplateWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    description?: StringFilter | string
    category?: StringFilter | string
    groupId?: StringNullableListFilter
    startsAt?: StringFilter | string
    endsAt?: StringFilter | string
    repeatDialy?: BoolFilter | boolean
    functionalGroup?: StringFilter | string
  }

  export type TaskTemplateOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    groupId?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    repeatDialy?: SortOrder
    functionalGroup?: SortOrder
  }

  export type TaskTemplateWhereUniqueInput = {
    id?: number
  }

  export type TaskTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    groupId?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    repeatDialy?: SortOrder
    functionalGroup?: SortOrder
    _count?: TaskTemplateCountOrderByAggregateInput
    _avg?: TaskTemplateAvgOrderByAggregateInput
    _max?: TaskTemplateMaxOrderByAggregateInput
    _min?: TaskTemplateMinOrderByAggregateInput
    _sum?: TaskTemplateSumOrderByAggregateInput
  }

  export type TaskTemplateScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TaskTemplateScalarWhereWithAggregatesInput>
    OR?: Enumerable<TaskTemplateScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TaskTemplateScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    category?: StringWithAggregatesFilter | string
    groupId?: StringNullableListFilter
    startsAt?: StringWithAggregatesFilter | string
    endsAt?: StringWithAggregatesFilter | string
    repeatDialy?: BoolWithAggregatesFilter | boolean
    functionalGroup?: StringWithAggregatesFilter | string
  }

  export type FunctionalGroupWhereInput = {
    AND?: Enumerable<FunctionalGroupWhereInput>
    OR?: Enumerable<FunctionalGroupWhereInput>
    NOT?: Enumerable<FunctionalGroupWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
  }

  export type FunctionalGroupOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type FunctionalGroupWhereUniqueInput = {
    id?: number
  }

  export type FunctionalGroupOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    _count?: FunctionalGroupCountOrderByAggregateInput
    _avg?: FunctionalGroupAvgOrderByAggregateInput
    _max?: FunctionalGroupMaxOrderByAggregateInput
    _min?: FunctionalGroupMinOrderByAggregateInput
    _sum?: FunctionalGroupSumOrderByAggregateInput
  }

  export type FunctionalGroupScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FunctionalGroupScalarWhereWithAggregatesInput>
    OR?: Enumerable<FunctionalGroupScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FunctionalGroupScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
  }

  export type UserTaskWhereInput = {
    AND?: Enumerable<UserTaskWhereInput>
    OR?: Enumerable<UserTaskWhereInput>
    NOT?: Enumerable<UserTaskWhereInput>
    id?: IntFilter | number
    userid?: StringFilter | string
    tasktTemplateId?: StringFilter | string
    completedAt?: StringFilter | string
    comment?: StringFilter | string
    location?: StringFilter | string
    status?: StringFilter | string
    taskType?: StringFilter | string
  }

  export type UserTaskOrderByWithRelationInput = {
    id?: SortOrder
    userid?: SortOrder
    tasktTemplateId?: SortOrder
    completedAt?: SortOrder
    comment?: SortOrder
    location?: SortOrder
    status?: SortOrder
    taskType?: SortOrder
  }

  export type UserTaskWhereUniqueInput = {
    id?: number
  }

  export type UserTaskOrderByWithAggregationInput = {
    id?: SortOrder
    userid?: SortOrder
    tasktTemplateId?: SortOrder
    completedAt?: SortOrder
    comment?: SortOrder
    location?: SortOrder
    status?: SortOrder
    taskType?: SortOrder
    _count?: UserTaskCountOrderByAggregateInput
    _avg?: UserTaskAvgOrderByAggregateInput
    _max?: UserTaskMaxOrderByAggregateInput
    _min?: UserTaskMinOrderByAggregateInput
    _sum?: UserTaskSumOrderByAggregateInput
  }

  export type UserTaskScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserTaskScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserTaskScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserTaskScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userid?: StringWithAggregatesFilter | string
    tasktTemplateId?: StringWithAggregatesFilter | string
    completedAt?: StringWithAggregatesFilter | string
    comment?: StringWithAggregatesFilter | string
    location?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    taskType?: StringWithAggregatesFilter | string
  }

  export type LinksWhereInput = {
    AND?: Enumerable<LinksWhereInput>
    OR?: Enumerable<LinksWhereInput>
    NOT?: Enumerable<LinksWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    href?: StringNullableFilter | string | null
  }

  export type LinksOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    href?: SortOrder
  }

  export type LinksWhereUniqueInput = {
    id?: number
  }

  export type LinksOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    href?: SortOrder
    _count?: LinksCountOrderByAggregateInput
    _avg?: LinksAvgOrderByAggregateInput
    _max?: LinksMaxOrderByAggregateInput
    _min?: LinksMinOrderByAggregateInput
    _sum?: LinksSumOrderByAggregateInput
  }

  export type LinksScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LinksScalarWhereWithAggregatesInput>
    OR?: Enumerable<LinksScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LinksScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    href?: StringNullableWithAggregatesFilter | string | null
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    first_name?: StringFilter | string
    last_name?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    phone_number?: StringNullableFilter | string | null
    country_code?: StringNullableFilter | string | null
    status?: StringNullableFilter | string | null
    is_archived?: BoolFilter | boolean
    last_active_at?: StringNullableFilter | string | null
    role?: StringFilter | string
    password?: StringNullableFilter | string | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    country_code?: SortOrder
    status?: SortOrder
    is_archived?: SortOrder
    last_active_at?: SortOrder
    role?: SortOrder
    password?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    country_code?: SortOrder
    status?: SortOrder
    is_archived?: SortOrder
    last_active_at?: SortOrder
    role?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    first_name?: StringWithAggregatesFilter | string
    last_name?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    phone_number?: StringNullableWithAggregatesFilter | string | null
    country_code?: StringNullableWithAggregatesFilter | string | null
    status?: StringNullableWithAggregatesFilter | string | null
    is_archived?: BoolWithAggregatesFilter | boolean
    last_active_at?: StringNullableWithAggregatesFilter | string | null
    role?: StringWithAggregatesFilter | string
    password?: StringNullableWithAggregatesFilter | string | null
  }

  export type GroupCreateInput = {
    groupName: string
    description?: string | null
  }

  export type GroupUncheckedCreateInput = {
    id?: number
    groupName: string
    description?: string | null
  }

  export type GroupUpdateInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GroupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GroupCreateManyInput = {
    id?: number
    groupName: string
    description?: string | null
  }

  export type GroupUpdateManyMutationInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GroupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GroupUserCreateInput = {
    userid?: GroupUserCreateuseridInput | Enumerable<string>
    createdBy: string
    groupid: string
  }

  export type GroupUserUncheckedCreateInput = {
    id?: number
    userid?: GroupUserCreateuseridInput | Enumerable<string>
    createdBy: string
    groupid: string
  }

  export type GroupUserUpdateInput = {
    userid?: GroupUserUpdateuseridInput | Enumerable<string>
    createdBy?: StringFieldUpdateOperationsInput | string
    groupid?: StringFieldUpdateOperationsInput | string
  }

  export type GroupUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userid?: GroupUserUpdateuseridInput | Enumerable<string>
    createdBy?: StringFieldUpdateOperationsInput | string
    groupid?: StringFieldUpdateOperationsInput | string
  }

  export type GroupUserCreateManyInput = {
    id?: number
    userid?: GroupUserCreateuseridInput | Enumerable<string>
    createdBy: string
    groupid: string
  }

  export type GroupUserUpdateManyMutationInput = {
    userid?: GroupUserUpdateuseridInput | Enumerable<string>
    createdBy?: StringFieldUpdateOperationsInput | string
    groupid?: StringFieldUpdateOperationsInput | string
  }

  export type GroupUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userid?: GroupUserUpdateuseridInput | Enumerable<string>
    createdBy?: StringFieldUpdateOperationsInput | string
    groupid?: StringFieldUpdateOperationsInput | string
  }

  export type UserActivityLoggerCreateInput = {
    userid: string
    event: string
    usertaskid: string
    location: string
  }

  export type UserActivityLoggerUncheckedCreateInput = {
    id?: number
    userid: string
    event: string
    usertaskid: string
    location: string
  }

  export type UserActivityLoggerUpdateInput = {
    userid?: StringFieldUpdateOperationsInput | string
    event?: StringFieldUpdateOperationsInput | string
    usertaskid?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type UserActivityLoggerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userid?: StringFieldUpdateOperationsInput | string
    event?: StringFieldUpdateOperationsInput | string
    usertaskid?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type UserActivityLoggerCreateManyInput = {
    id?: number
    userid: string
    event: string
    usertaskid: string
    location: string
  }

  export type UserActivityLoggerUpdateManyMutationInput = {
    userid?: StringFieldUpdateOperationsInput | string
    event?: StringFieldUpdateOperationsInput | string
    usertaskid?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type UserActivityLoggerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userid?: StringFieldUpdateOperationsInput | string
    event?: StringFieldUpdateOperationsInput | string
    usertaskid?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type TaskTemplateCreateInput = {
    title: string
    description: string
    category: string
    groupId?: TaskTemplateCreategroupIdInput | Enumerable<string>
    startsAt: string
    endsAt: string
    repeatDialy: boolean
    functionalGroup: string
  }

  export type TaskTemplateUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    category: string
    groupId?: TaskTemplateCreategroupIdInput | Enumerable<string>
    startsAt: string
    endsAt: string
    repeatDialy: boolean
    functionalGroup: string
  }

  export type TaskTemplateUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    groupId?: TaskTemplateUpdategroupIdInput | Enumerable<string>
    startsAt?: StringFieldUpdateOperationsInput | string
    endsAt?: StringFieldUpdateOperationsInput | string
    repeatDialy?: BoolFieldUpdateOperationsInput | boolean
    functionalGroup?: StringFieldUpdateOperationsInput | string
  }

  export type TaskTemplateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    groupId?: TaskTemplateUpdategroupIdInput | Enumerable<string>
    startsAt?: StringFieldUpdateOperationsInput | string
    endsAt?: StringFieldUpdateOperationsInput | string
    repeatDialy?: BoolFieldUpdateOperationsInput | boolean
    functionalGroup?: StringFieldUpdateOperationsInput | string
  }

  export type TaskTemplateCreateManyInput = {
    id?: number
    title: string
    description: string
    category: string
    groupId?: TaskTemplateCreategroupIdInput | Enumerable<string>
    startsAt: string
    endsAt: string
    repeatDialy: boolean
    functionalGroup: string
  }

  export type TaskTemplateUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    groupId?: TaskTemplateUpdategroupIdInput | Enumerable<string>
    startsAt?: StringFieldUpdateOperationsInput | string
    endsAt?: StringFieldUpdateOperationsInput | string
    repeatDialy?: BoolFieldUpdateOperationsInput | boolean
    functionalGroup?: StringFieldUpdateOperationsInput | string
  }

  export type TaskTemplateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    groupId?: TaskTemplateUpdategroupIdInput | Enumerable<string>
    startsAt?: StringFieldUpdateOperationsInput | string
    endsAt?: StringFieldUpdateOperationsInput | string
    repeatDialy?: BoolFieldUpdateOperationsInput | boolean
    functionalGroup?: StringFieldUpdateOperationsInput | string
  }

  export type FunctionalGroupCreateInput = {
    title: string
  }

  export type FunctionalGroupUncheckedCreateInput = {
    id?: number
    title: string
  }

  export type FunctionalGroupUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
  }

  export type FunctionalGroupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
  }

  export type FunctionalGroupCreateManyInput = {
    id?: number
    title: string
  }

  export type FunctionalGroupUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
  }

  export type FunctionalGroupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
  }

  export type UserTaskCreateInput = {
    userid: string
    tasktTemplateId: string
    completedAt: string
    comment: string
    location: string
    status: string
    taskType: string
  }

  export type UserTaskUncheckedCreateInput = {
    id?: number
    userid: string
    tasktTemplateId: string
    completedAt: string
    comment: string
    location: string
    status: string
    taskType: string
  }

  export type UserTaskUpdateInput = {
    userid?: StringFieldUpdateOperationsInput | string
    tasktTemplateId?: StringFieldUpdateOperationsInput | string
    completedAt?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    taskType?: StringFieldUpdateOperationsInput | string
  }

  export type UserTaskUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userid?: StringFieldUpdateOperationsInput | string
    tasktTemplateId?: StringFieldUpdateOperationsInput | string
    completedAt?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    taskType?: StringFieldUpdateOperationsInput | string
  }

  export type UserTaskCreateManyInput = {
    id?: number
    userid: string
    tasktTemplateId: string
    completedAt: string
    comment: string
    location: string
    status: string
    taskType: string
  }

  export type UserTaskUpdateManyMutationInput = {
    userid?: StringFieldUpdateOperationsInput | string
    tasktTemplateId?: StringFieldUpdateOperationsInput | string
    completedAt?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    taskType?: StringFieldUpdateOperationsInput | string
  }

  export type UserTaskUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userid?: StringFieldUpdateOperationsInput | string
    tasktTemplateId?: StringFieldUpdateOperationsInput | string
    completedAt?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    taskType?: StringFieldUpdateOperationsInput | string
  }

  export type LinksCreateInput = {
    title: string
    href?: string | null
  }

  export type LinksUncheckedCreateInput = {
    id?: number
    title: string
    href?: string | null
  }

  export type LinksUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    href?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LinksUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    href?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LinksCreateManyInput = {
    id?: number
    title: string
    href?: string | null
  }

  export type LinksUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    href?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LinksUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    href?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    first_name: string
    last_name?: string | null
    email?: string | null
    phone_number?: string | null
    country_code?: string | null
    status?: string | null
    is_archived: boolean
    last_active_at?: string | null
    role: string
    password?: string | null
  }

  export type UserUncheckedCreateInput = {
    id?: number
    first_name: string
    last_name?: string | null
    email?: string | null
    phone_number?: string | null
    country_code?: string | null
    status?: string | null
    is_archived: boolean
    last_active_at?: string | null
    role: string
    password?: string | null
  }

  export type UserUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    country_code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    is_archived?: BoolFieldUpdateOperationsInput | boolean
    last_active_at?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    country_code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    is_archived?: BoolFieldUpdateOperationsInput | boolean
    last_active_at?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyInput = {
    id?: number
    first_name: string
    last_name?: string | null
    email?: string | null
    phone_number?: string | null
    country_code?: string | null
    status?: string | null
    is_archived: boolean
    last_active_at?: string | null
    role: string
    password?: string | null
  }

  export type UserUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    country_code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    is_archived?: BoolFieldUpdateOperationsInput | boolean
    last_active_at?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    country_code?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    is_archived?: BoolFieldUpdateOperationsInput | boolean
    last_active_at?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type GroupCountOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    description?: SortOrder
  }

  export type GroupAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GroupMaxOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    description?: SortOrder
  }

  export type GroupMinOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    description?: SortOrder
  }

  export type GroupSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type GroupUserCountOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    createdBy?: SortOrder
    groupid?: SortOrder
  }

  export type GroupUserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GroupUserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
    groupid?: SortOrder
  }

  export type GroupUserMinOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
    groupid?: SortOrder
  }

  export type GroupUserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserActivityLoggerCountOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    event?: SortOrder
    usertaskid?: SortOrder
    location?: SortOrder
  }

  export type UserActivityLoggerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserActivityLoggerMaxOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    event?: SortOrder
    usertaskid?: SortOrder
    location?: SortOrder
  }

  export type UserActivityLoggerMinOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    event?: SortOrder
    usertaskid?: SortOrder
    location?: SortOrder
  }

  export type UserActivityLoggerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type TaskTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    groupId?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    repeatDialy?: SortOrder
    functionalGroup?: SortOrder
  }

  export type TaskTemplateAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TaskTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    repeatDialy?: SortOrder
    functionalGroup?: SortOrder
  }

  export type TaskTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    repeatDialy?: SortOrder
    functionalGroup?: SortOrder
  }

  export type TaskTemplateSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type FunctionalGroupCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type FunctionalGroupAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FunctionalGroupMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type FunctionalGroupMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type FunctionalGroupSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserTaskCountOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    tasktTemplateId?: SortOrder
    completedAt?: SortOrder
    comment?: SortOrder
    location?: SortOrder
    status?: SortOrder
    taskType?: SortOrder
  }

  export type UserTaskAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserTaskMaxOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    tasktTemplateId?: SortOrder
    completedAt?: SortOrder
    comment?: SortOrder
    location?: SortOrder
    status?: SortOrder
    taskType?: SortOrder
  }

  export type UserTaskMinOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    tasktTemplateId?: SortOrder
    completedAt?: SortOrder
    comment?: SortOrder
    location?: SortOrder
    status?: SortOrder
    taskType?: SortOrder
  }

  export type UserTaskSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LinksCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    href?: SortOrder
  }

  export type LinksAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LinksMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    href?: SortOrder
  }

  export type LinksMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    href?: SortOrder
  }

  export type LinksSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    country_code?: SortOrder
    status?: SortOrder
    is_archived?: SortOrder
    last_active_at?: SortOrder
    role?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    country_code?: SortOrder
    status?: SortOrder
    is_archived?: SortOrder
    last_active_at?: SortOrder
    role?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    country_code?: SortOrder
    status?: SortOrder
    is_archived?: SortOrder
    last_active_at?: SortOrder
    role?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GroupUserCreateuseridInput = {
    set: Enumerable<string>
  }

  export type GroupUserUpdateuseridInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type TaskTemplateCreategroupIdInput = {
    set: Enumerable<string>
  }

  export type TaskTemplateUpdategroupIdInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}